; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Obj\main.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\Obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Keil\ARM\RV31\LIB\ST\STM32F10x -IC:\Keil\ARM\RV31\LIB\ST -ID:\tools\Keil\ARM\RV31\Inc -ID:\tools\Keil\ARM\CMSIS\Include -ID:\tools\Keil\ARM\Inc\ST\STM32F10x -DSTM32F10X_LD --omf_browse=.\Obj\main.crf main.c]
                          THUMB

                          AREA ||i.FlashRestore||, CODE, READONLY, ALIGN=2

                  FlashRestore PROC
;;;111    
;;;112    int FlashRestore()
000000  b570              PUSH     {r4-r6,lr}
;;;113    {
;;;114    	int i;
;;;115    
;;;116    	if (CRC16((unsigned char *) Flash_Params, FLASH_SIZE*4-4) != Flash_Params->crc)
000002  4822              LDR      r0,|L1.140|
000004  f1a00214          SUB      r2,r0,#0x14
000008  1a80              SUBS     r0,r0,r2
00000a  1045              ASRS     r5,r0,#1
00000c  eb0570d5          ADD      r0,r5,r5,LSR #31
000010  1040              ASRS     r0,r0,#1
000012  1c40              ADDS     r0,r0,#1
000014  2204              MOVS     r2,#4
000016  ebc20180          RSB      r1,r2,r0,LSL #2
00001a  481d              LDR      r0,|L1.144|
00001c  6800              LDR      r0,[r0,#0]  ; Flash_Params
00001e  f7fffffe          BL       CRC16
000022  491b              LDR      r1,|L1.144|
000024  6809              LDR      r1,[r1,#0]  ; Flash_Params
000026  8a89              LDRH     r1,[r1,#0x14]
000028  4288              CMP      r0,r1
00002a  d015              BEQ      |L1.88|
;;;117    	{
;;;118    	for (i = 0; i < FLASH_SIZE ; i++)
00002c  2400              MOVS     r4,#0
00002e  e005              B        |L1.60|
                  |L1.48|
;;;119    		PARAMS_BUF[i] = 0;
000030  2000              MOVS     r0,#0
000032  4918              LDR      r1,|L1.148|
000034  6809              LDR      r1,[r1,#0]  ; PARAMS_BUF
000036  f8210014          STRH     r0,[r1,r4,LSL #1]
00003a  1c64              ADDS     r4,r4,#1              ;118
                  |L1.60|
00003c  4913              LDR      r1,|L1.140|
00003e  f1a10214          SUB      r2,r1,#0x14           ;118
000042  1a89              SUBS     r1,r1,r2              ;118
000044  1048              ASRS     r0,r1,#1              ;118
000046  eb0071d0          ADD      r1,r0,r0,LSR #31      ;118
00004a  2201              MOVS     r2,#1                 ;118
00004c  eb020161          ADD      r1,r2,r1,ASR #1       ;118
000050  42a1              CMP      r1,r4                 ;118
000052  dced              BGT      |L1.48|
;;;120    	return 0;
000054  2000              MOVS     r0,#0
                  |L1.86|
;;;121    	}
;;;122    	else
;;;123    	{
;;;124    	for (i = 0; i < FLASH_SIZE  ; i++)
;;;125    		BUF1[i] = BUF2[i];
;;;126    	return 1;
;;;127    	}
;;;128    }
000056  bd70              POP      {r4-r6,pc}
                  |L1.88|
000058  2400              MOVS     r4,#0                 ;124
00005a  e008              B        |L1.110|
                  |L1.92|
00005c  480e              LDR      r0,|L1.152|
00005e  6800              LDR      r0,[r0,#0]            ;125  ; BUF2
000060  f8500024          LDR      r0,[r0,r4,LSL #2]     ;125
000064  490d              LDR      r1,|L1.156|
000066  6809              LDR      r1,[r1,#0]            ;125  ; BUF1
000068  f8410024          STR      r0,[r1,r4,LSL #2]     ;125
00006c  1c64              ADDS     r4,r4,#1              ;124
                  |L1.110|
00006e  4907              LDR      r1,|L1.140|
000070  f1a10214          SUB      r2,r1,#0x14           ;124
000074  1a89              SUBS     r1,r1,r2              ;124
000076  1048              ASRS     r0,r1,#1              ;124
000078  eb0071d0          ADD      r1,r0,r0,LSR #31      ;124
00007c  2201              MOVS     r2,#1                 ;124
00007e  eb020161          ADD      r1,r2,r1,ASR #1       ;124
000082  42a1              CMP      r1,r4                 ;124
000084  dcea              BGT      |L1.92|
000086  2001              MOVS     r0,#1                 ;126
000088  e7e5              B        |L1.86|
;;;129    
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      Params+0x14
                  |L1.144|
                          DCD      Flash_Params
                  |L1.148|
                          DCD      PARAMS_BUF
                  |L1.152|
                          DCD      BUF2
                  |L1.156|
                          DCD      BUF1

                          AREA ||i.FlashStore||, CODE, READONLY, ALIGN=2

                  FlashStore PROC
;;;77     
;;;78     void FlashStore()
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
;;;80     	int i,j;
;;;81     	FLASHStatus = FLASH_COMPLETE;
000002  2004              MOVS     r0,#4
000004  494a              LDR      r1,|L2.304|
000006  7008              STRB     r0,[r1,#0]
;;;82     	MemoryProgramStatus = PASSED;
000008  2001              MOVS     r0,#1
00000a  494a              LDR      r1,|L2.308|
00000c  7008              STRB     r0,[r1,#0]
;;;83     	if((BUF2[0]&8)&&((BUF2[0]&0xFF)!=0xFF))
00000e  484a              LDR      r0,|L2.312|
000010  6800              LDR      r0,[r0,#0]  ; BUF2
000012  6800              LDR      r0,[r0,#0]
000014  f0100f08          TST      r0,#8
000018  d006              BEQ      |L2.40|
00001a  4847              LDR      r0,|L2.312|
00001c  6800              LDR      r0,[r0,#0]  ; BUF2
00001e  6800              LDR      r0,[r0,#0]
000020  b2c0              UXTB     r0,r0
000022  28ff              CMP      r0,#0xff
000024  d000              BEQ      |L2.40|
                  |L2.38|
;;;84     		return;
;;;85     
;;;86     	j=0;
;;;87     	for (i=0;i<FLASH_SIZE;i++)
;;;88     	if (BUF1[i]!=BUF2[i])
;;;89     		j=1;
;;;90     	if (!j)
;;;91     		return;
;;;92     
;;;93     	FLASH_Unlock();
;;;94     
;;;95     	NbrOfPage = (EndAddr - FLASH_LOCATION) / FLASH_PAGE_SIZE;
;;;96     
;;;97     	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
;;;98     
;;;99     	for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++)
;;;100    	{
;;;101    		FLASHStatus = FLASH_ErasePage(FLASH_LOCATION + (FLASH_PAGE_SIZE * EraseCounter));
;;;102    	}
;;;103    	Address = FLASH_LOCATION;
;;;104    	i=FLASH_SIZE;
;;;105    
;;;106    	Params.crc = CRC16((unsigned char *) & Params, FLASH_SIZE*4-4);
;;;107    	for (i=0;i<FLASH_SIZE;i++)
;;;108    	if (BUF1[i]!=BUF2[i])
;;;109    	FLASH_ProgramWord(FLASH_LOCATION+(i<<2), BUF1[i]);
;;;110    }
000026  bd70              POP      {r4-r6,pc}
                  |L2.40|
000028  2500              MOVS     r5,#0                 ;86
00002a  2400              MOVS     r4,#0                 ;87
00002c  e00b              B        |L2.70|
                  |L2.46|
00002e  4843              LDR      r0,|L2.316|
000030  6800              LDR      r0,[r0,#0]            ;88  ; BUF1
000032  f8500024          LDR      r0,[r0,r4,LSL #2]     ;88
000036  4940              LDR      r1,|L2.312|
000038  6809              LDR      r1,[r1,#0]            ;88  ; BUF2
00003a  f8511024          LDR      r1,[r1,r4,LSL #2]     ;88
00003e  4288              CMP      r0,r1                 ;88
000040  d000              BEQ      |L2.68|
000042  2501              MOVS     r5,#1                 ;89
                  |L2.68|
000044  1c64              ADDS     r4,r4,#1              ;87
                  |L2.70|
000046  493e              LDR      r1,|L2.320|
000048  f1a10214          SUB      r2,r1,#0x14           ;87
00004c  1a89              SUBS     r1,r1,r2              ;87
00004e  1048              ASRS     r0,r1,#1              ;87
000050  eb0071d0          ADD      r1,r0,r0,LSR #31      ;87
000054  2201              MOVS     r2,#1                 ;87
000056  eb020161          ADD      r1,r2,r1,ASR #1       ;87
00005a  42a1              CMP      r1,r4                 ;87
00005c  dce7              BGT      |L2.46|
00005e  b905              CBNZ     r5,|L2.98|
000060  e7e1              B        |L2.38|
                  |L2.98|
000062  f7fffffe          BL       FLASH_Unlock
000066  2001              MOVS     r0,#1                 ;95
000068  4936              LDR      r1,|L2.324|
00006a  6008              STR      r0,[r1,#0]            ;95  ; NbrOfPage
00006c  2035              MOVS     r0,#0x35              ;97
00006e  f7fffffe          BL       FLASH_ClearFlag
000072  2000              MOVS     r0,#0                 ;99
000074  4934              LDR      r1,|L2.328|
000076  6008              STR      r0,[r1,#0]            ;99  ; EraseCounter
000078  e00e              B        |L2.152|
                  |L2.122|
00007a  4933              LDR      r1,|L2.328|
00007c  6809              LDR      r1,[r1,#0]            ;101  ; EraseCounter
00007e  4a33              LDR      r2,|L2.332|
000080  1453              ASRS     r3,r2,#17             ;101
000082  fb032001          MLA      r0,r3,r1,r2           ;101
000086  f7fffffe          BL       FLASH_ErasePage
00008a  4929              LDR      r1,|L2.304|
00008c  7008              STRB     r0,[r1,#0]            ;101
00008e  482e              LDR      r0,|L2.328|
000090  6800              LDR      r0,[r0,#0]            ;99  ; EraseCounter
000092  1c40              ADDS     r0,r0,#1              ;99
000094  492c              LDR      r1,|L2.328|
000096  6008              STR      r0,[r1,#0]            ;99  ; EraseCounter
                  |L2.152|
000098  482b              LDR      r0,|L2.328|
00009a  6800              LDR      r0,[r0,#0]            ;99  ; EraseCounter
00009c  4929              LDR      r1,|L2.324|
00009e  6809              LDR      r1,[r1,#0]            ;99  ; NbrOfPage
0000a0  4288              CMP      r0,r1                 ;99
0000a2  d203              BCS      |L2.172|
0000a4  4822              LDR      r0,|L2.304|
0000a6  7800              LDRB     r0,[r0,#0]            ;99  ; FLASHStatus
0000a8  2804              CMP      r0,#4                 ;99
0000aa  d0e6              BEQ      |L2.122|
                  |L2.172|
0000ac  4827              LDR      r0,|L2.332|
0000ae  4928              LDR      r1,|L2.336|
0000b0  6008              STR      r0,[r1,#0]            ;103  ; Address
0000b2  4923              LDR      r1,|L2.320|
0000b4  f1a10214          SUB      r2,r1,#0x14           ;104
0000b8  1a89              SUBS     r1,r1,r2              ;104
0000ba  1048              ASRS     r0,r1,#1              ;104
0000bc  eb0071d0          ADD      r1,r0,r0,LSR #31      ;104
0000c0  1049              ASRS     r1,r1,#1              ;104
0000c2  1c4c              ADDS     r4,r1,#1              ;104
0000c4  481e              LDR      r0,|L2.320|
0000c6  1a80              SUBS     r0,r0,r2              ;106
0000c8  1046              ASRS     r6,r0,#1              ;106
0000ca  eb0670d6          ADD      r0,r6,r6,LSR #31      ;106
0000ce  1040              ASRS     r0,r0,#1              ;106
0000d0  1c40              ADDS     r0,r0,#1              ;106
0000d2  2204              MOVS     r2,#4                 ;106
0000d4  ebc20180          RSB      r1,r2,r0,LSL #2       ;106
0000d8  4819              LDR      r0,|L2.320|
0000da  3814              SUBS     r0,r0,#0x14           ;106
0000dc  f7fffffe          BL       CRC16
0000e0  4917              LDR      r1,|L2.320|
0000e2  3914              SUBS     r1,r1,#0x14           ;106
0000e4  8288              STRH     r0,[r1,#0x14]         ;106
0000e6  2400              MOVS     r4,#0                 ;107
0000e8  e013              B        |L2.274|
                  |L2.234|
0000ea  4814              LDR      r0,|L2.316|
0000ec  6800              LDR      r0,[r0,#0]            ;108  ; BUF1
0000ee  f8500024          LDR      r0,[r0,r4,LSL #2]     ;108
0000f2  4911              LDR      r1,|L2.312|
0000f4  6809              LDR      r1,[r1,#0]            ;108  ; BUF2
0000f6  f8511024          LDR      r1,[r1,r4,LSL #2]     ;108
0000fa  4288              CMP      r0,r1                 ;108
0000fc  d008              BEQ      |L2.272|
0000fe  4a0f              LDR      r2,|L2.316|
000100  6812              LDR      r2,[r2,#0]            ;109  ; BUF1
000102  f8521024          LDR      r1,[r2,r4,LSL #2]     ;109
000106  4a11              LDR      r2,|L2.332|
000108  eb020084          ADD      r0,r2,r4,LSL #2       ;109
00010c  f7fffffe          BL       FLASH_ProgramWord
                  |L2.272|
000110  1c64              ADDS     r4,r4,#1              ;107
                  |L2.274|
000112  490b              LDR      r1,|L2.320|
000114  f1a10214          SUB      r2,r1,#0x14           ;107
000118  1a89              SUBS     r1,r1,r2              ;107
00011a  1048              ASRS     r0,r1,#1              ;107
00011c  eb0071d0          ADD      r1,r0,r0,LSR #31      ;107
000120  2201              MOVS     r2,#1                 ;107
000122  eb020161          ADD      r1,r2,r1,ASR #1       ;107
000126  42a1              CMP      r1,r4                 ;107
000128  dcdf              BGT      |L2.234|
00012a  bf00              NOP      
00012c  e77b              B        |L2.38|
;;;111    
                          ENDP

00012e  0000              DCW      0x0000
                  |L2.304|
                          DCD      FLASHStatus
                  |L2.308|
                          DCD      MemoryProgramStatus
                  |L2.312|
                          DCD      BUF2
                  |L2.316|
                          DCD      BUF1
                  |L2.320|
                          DCD      Params+0x14
                  |L2.324|
                          DCD      NbrOfPage
                  |L2.328|
                          DCD      EraseCounter
                  |L2.332|
                          DCD      0x08003c00
                  |L2.336|
                          DCD      Address

                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;171    
;;;172    void NVIC_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;173    {
;;;174    	NVIC_InitTypeDef NVIC_InitStructure;
;;;175    
;;;176    #ifdef  VECT_TAB_RAM
;;;177    	/* Set the Vector Table base location at 0x20000000 */
;;;178    	NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
;;;179    #else  /* VECT_TAB_FLASH  */
;;;180    	/* Set the Vector Table base location at 0x08000000 */
;;;181    	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
000002  2100              MOVS     r1,#0
000004  f04f6000          MOV      r0,#0x8000000
000008  f7fffffe          BL       NVIC_SetVectorTable
;;;182    #endif
;;;183    
;;;184    
;;;185    	/* Enable the USART1 Interrupt */
;;;186    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
00000c  2025              MOVS     r0,#0x25
00000e  f88d0000          STRB     r0,[sp,#0]
;;;187    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000012  2000              MOVS     r0,#0
000014  f88d0001          STRB     r0,[sp,#1]
;;;188    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000018  f88d0002          STRB     r0,[sp,#2]
;;;189    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00001c  2001              MOVS     r0,#1
00001e  f88d0003          STRB     r0,[sp,#3]
;;;190    	NVIC_Init(&NVIC_InitStructure);
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       NVIC_Init
;;;191    
;;;192    	/* Enable the TIM2 Interrupt */
;;;193    	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
000028  201c              MOVS     r0,#0x1c
00002a  f88d0000          STRB     r0,[sp,#0]
;;;194    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
00002e  2000              MOVS     r0,#0
000030  f88d0001          STRB     r0,[sp,#1]
;;;195    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000034  f88d0002          STRB     r0,[sp,#2]
;;;196    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000038  2001              MOVS     r0,#1
00003a  f88d0003          STRB     r0,[sp,#3]
;;;197    	NVIC_Init(&NVIC_InitStructure);
00003e  4668              MOV      r0,sp
000040  f7fffffe          BL       NVIC_Init
;;;198    
;;;199    }
000044  bd08              POP      {r3,pc}
;;;200    
                          ENDP


                          AREA ||i.RCC_Configuration||, CODE, READONLY, ALIGN=1

                  RCC_Configuration PROC
;;;130    
;;;131    void RCC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133    	/* RCC system reset(for debug purpose) */
;;;134    	RCC_DeInit();
000002  f7fffffe          BL       RCC_DeInit
;;;135    
;;;136    	/* Enable Prefetch Buffer */
;;;137    	FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;138    
;;;139    	/* Flash 2 wait state */
;;;140    	FLASH_SetLatency(FLASH_Latency_2);
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       FLASH_SetLatency
;;;141    
;;;142    	/* HCLK = SYSCLK */
;;;143    	RCC_HCLKConfig(RCC_SYSCLK_Div1);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       RCC_HCLKConfig
;;;144    
;;;145    	/* PCLK2 = HCLK */
;;;146    	RCC_PCLK2Config(RCC_HCLK_Div1);
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       RCC_PCLK2Config
;;;147    
;;;148    	/* PCLK1 = HCLK/2 */
;;;149    	RCC_PCLK1Config(RCC_HCLK_Div2);
00001e  f44f6080          MOV      r0,#0x400
000022  f7fffffe          BL       RCC_PCLK1Config
;;;150    
;;;151    	/* ADCCLK = PCLK2/4 */
;;;152    	RCC_ADCCLKConfig(RCC_PCLK2_Div4);
000026  f44f4080          MOV      r0,#0x4000
00002a  f7fffffe          BL       RCC_ADCCLKConfig
;;;153    
;;;154    	/* PLLCLK = 8MHz * 7 = 56 MHz */
;;;155    	RCC_PLLConfig(RCC_PLLSource_HSI_Div2,RCC_PLLMul_6);
00002e  f44f1180          MOV      r1,#0x100000
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       RCC_PLLConfig
;;;156    
;;;157    	/* Enable PLL */
;;;158    	RCC_PLLCmd(ENABLE);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       RCC_PLLCmd
;;;159    
;;;160    	/* Wait till PLL is ready */
;;;161    	while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
00003e  bf00              NOP      
                  |L4.64|
000040  2039              MOVS     r0,#0x39
000042  f7fffffe          BL       RCC_GetFlagStatus
000046  2800              CMP      r0,#0
000048  d0fa              BEQ      |L4.64|
;;;162    
;;;163    	/* Select PLL as system clock source */
;;;164    	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       RCC_SYSCLKConfig
;;;165    
;;;166    	/* Wait till PLL is used as system clock source */
;;;167    	while(RCC_GetSYSCLKSource() != 0x08);
000050  bf00              NOP      
                  |L4.82|
000052  f7fffffe          BL       RCC_GetSYSCLKSource
000056  2808              CMP      r0,#8
000058  d1fb              BNE      |L4.82|
;;;168    
;;;169    }
00005a  bd10              POP      {r4,pc}
;;;170    
                          ENDP


                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;387    
;;;388    void TIM2_IRQHandler(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;389    {
;;;390    	static ch=0;
;;;391    	int ADC_Value;
;;;392    	int DACtmp,tmp;
;;;393    	adc_channel=((adc_channel==5)?0:adc_channel+1);
000004  48d1              LDR      r0,|L5.844|
000006  6800              LDR      r0,[r0,#0]  ; adc_channel
000008  2805              CMP      r0,#5
00000a  d101              BNE      |L5.16|
00000c  2000              MOVS     r0,#0
00000e  e002              B        |L5.22|
                  |L5.16|
000010  48ce              LDR      r0,|L5.844|
000012  6800              LDR      r0,[r0,#0]  ; adc_channel
000014  1c40              ADDS     r0,r0,#1
                  |L5.22|
000016  49cd              LDR      r1,|L5.844|
000018  6008              STR      r0,[r1,#0]  ; adc_channel
;;;394    	ADC_Value=ADC_GetConversionValue(ADC1);
00001a  48cd              LDR      r0,|L5.848|
00001c  f7fffffe          BL       ADC_GetConversionValue
000020  4682              MOV      r10,r0
;;;395    	switch (adc_channel)
000022  48ca              LDR      r0,|L5.844|
000024  6800              LDR      r0,[r0,#0]  ; adc_channel
000026  2806              CMP      r0,#6
000028  d22b              BCS      |L5.130|
00002a  e8dff000          TBB      [pc,r0]
00002e  032b              DCB      0x03,0x2b
000030  4c6a89a9          DCB      0x4c,0x6a,0x89,0xa9
;;;396    	{
;;;397    		case 0:
;;;398    			Temp_Value_int+=(((ADC_Value<<16)-Temp_Value_int)>>8);
000034  48c7              LDR      r0,|L5.852|
000036  6800              LDR      r0,[r0,#0]  ; Temp_Value_int
000038  ebc0400a          RSB      r0,r0,r10,LSL #16
00003c  49c5              LDR      r1,|L5.852|
00003e  6809              LDR      r1,[r1,#0]  ; Temp_Value_int
000040  eb012020          ADD      r0,r1,r0,ASR #8
000044  49c3              LDR      r1,|L5.852|
000046  6008              STR      r0,[r1,#0]  ; Temp_Value_int
;;;399    			Params.Temp_Int=(28000-(Temp_Value_int>>16))/8.539539393939394+250;
000048  6809              LDR      r1,[r1,#0]  ; Temp_Value_int
00004a  f6465260          MOV      r2,#0x6d60
00004e  eba24021          SUB      r0,r2,r1,ASR #16
000052  f7fffffe          BL       __aeabi_i2d
000056  4680              MOV      r8,r0
000058  4abf              LDR      r2,|L5.856|
00005a  4bc0              LDR      r3,|L5.860|
00005c  f7fffffe          BL       __aeabi_ddiv
000060  4606              MOV      r6,r0
000062  2200              MOVS     r2,#0
000064  4bbe              LDR      r3,|L5.864|
000066  f7fffffe          BL       __aeabi_dadd
00006a  4604              MOV      r4,r0
00006c  f7fffffe          BL       __aeabi_d2uiz
000070  49bc              LDR      r1,|L5.868|
000072  f8a10046          STRH     r0,[r1,#0x46]
;;;400    			ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_239Cycles5);
000076  2307              MOVS     r3,#7
000078  2201              MOVS     r2,#1
00007a  2103              MOVS     r1,#3
00007c  48b4              LDR      r0,|L5.848|
00007e  f7fffffe          BL       ADC_RegularChannelConfig
                  |L5.130|
;;;401    			break;
000082  e08f              B        |L5.420|
;;;402    		case 1:
;;;403    			Eass_Value_int+=((((ADC_Value-32768)<<16)-Eass_Value_int)>>8);
000084  f5aa4000          SUB      r0,r10,#0x8000
000088  49b7              LDR      r1,|L5.872|
00008a  6809              LDR      r1,[r1,#0]  ; Eass_Value_int
00008c  ebc14000          RSB      r0,r1,r0,LSL #16
000090  49b5              LDR      r1,|L5.872|
000092  6809              LDR      r1,[r1,#0]  ; Eass_Value_int
000094  eb012020          ADD      r0,r1,r0,ASR #8
000098  49b3              LDR      r1,|L5.872|
00009a  6008              STR      r0,[r1,#0]  ; Eass_Value_int
;;;404    			Params.Ass=32768-90*((Eass_Value_int>>16))/32768;					//Eass
00009c  6809              LDR      r1,[r1,#0]  ; Eass_Value_int
00009e  1409              ASRS     r1,r1,#16
0000a0  225a              MOVS     r2,#0x5a
0000a2  fb01f002          MUL      r0,r1,r2
0000a6  17c1              ASRS     r1,r0,#31
0000a8  eb004151          ADD      r1,r0,r1,LSR #17
0000ac  13c9              ASRS     r1,r1,#15
0000ae  f5c14100          RSB      r1,r1,#0x8000
0000b2  4aac              LDR      r2,|L5.868|
0000b4  f8a21044          STRH     r1,[r2,#0x44]
;;;405    			ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 1, ADC_SampleTime_239Cycles5);
0000b8  2307              MOVS     r3,#7
0000ba  2201              MOVS     r2,#1
0000bc  2104              MOVS     r1,#4
0000be  48a4              LDR      r0,|L5.848|
0000c0  f7fffffe          BL       ADC_RegularChannelConfig
;;;406    			break;
0000c4  e06e              B        |L5.420|
;;;407    		case 2:
;;;408    			Ehv_Value_int+=(((ADC_Value<<16)-Ehv_Value_int)>>8);
0000c6  48a9              LDR      r0,|L5.876|
0000c8  6800              LDR      r0,[r0,#0]  ; Ehv_Value_int
0000ca  ebc0400a          RSB      r0,r0,r10,LSL #16
0000ce  49a7              LDR      r1,|L5.876|
0000d0  6809              LDR      r1,[r1,#0]  ; Ehv_Value_int
0000d2  eb012020          ADD      r0,r1,r0,ASR #8
0000d6  49a5              LDR      r1,|L5.876|
0000d8  6008              STR      r0,[r1,#0]  ; Ehv_Value_int
;;;409    			Params.HV=3350*(Ehv_Value_int>>16)/13305; //Ehv
0000da  4608              MOV      r0,r1
0000dc  6800              LDR      r0,[r0,#0]  ; Ehv_Value_int
0000de  1400              ASRS     r0,r0,#16
0000e0  f6405116          MOV      r1,#0xd16
0000e4  4348              MULS     r0,r1,r0
0000e6  f24331f9          MOV      r1,#0x33f9
0000ea  fb90f0f1          SDIV     r0,r0,r1
0000ee  499d              LDR      r1,|L5.868|
0000f0  f8a10042          STRH     r0,[r1,#0x42]
;;;410    			ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 1, ADC_SampleTime_239Cycles5); //5
0000f4  2307              MOVS     r3,#7
0000f6  2201              MOVS     r2,#1
0000f8  2105              MOVS     r1,#5
0000fa  4895              LDR      r0,|L5.848|
0000fc  f7fffffe          BL       ADC_RegularChannelConfig
;;;411    			break;
000100  e050              B        |L5.420|
;;;412    		case 3:
;;;413    			Pos_Value_int+=(((ADC_Value<<16)-Pos_Value_int)>>Params.Filter_Level);
000102  489b              LDR      r0,|L5.880|
000104  6800              LDR      r0,[r0,#0]  ; Pos_Value_int
000106  ebc0400a          RSB      r0,r0,r10,LSL #16
00010a  4996              LDR      r1,|L5.868|
00010c  8a49              LDRH     r1,[r1,#0x12]  ; Params
00010e  4108              ASRS     r0,r0,r1
000110  4997              LDR      r1,|L5.880|
000112  6809              LDR      r1,[r1,#0]  ; Pos_Value_int
000114  4408              ADD      r0,r0,r1
000116  4996              LDR      r1,|L5.880|
000118  6008              STR      r0,[r1,#0]  ; Pos_Value_int
;;;414    			Params.Pos_Value=FLAG_FILTER?(Pos_Value_int>>16):ADC_Value;
00011a  4892              LDR      r0,|L5.868|
00011c  8800              LDRH     r0,[r0,#0]  ; Params
00011e  f0100f04          TST      r0,#4
000122  d003              BEQ      |L5.300|
000124  4608              MOV      r0,r1
000126  6800              LDR      r0,[r0,#0]  ; Pos_Value_int
000128  1400              ASRS     r0,r0,#16
00012a  e000              B        |L5.302|
                  |L5.300|
00012c  4650              MOV      r0,r10
                  |L5.302|
00012e  498d              LDR      r1,|L5.868|
000130  87c8              STRH     r0,[r1,#0x3e]
;;;415    			ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 1, ADC_SampleTime_239Cycles5);		   //6
000132  2307              MOVS     r3,#7
000134  2201              MOVS     r2,#1
000136  2106              MOVS     r1,#6
000138  4885              LDR      r0,|L5.848|
00013a  f7fffffe          BL       ADC_RegularChannelConfig
;;;416    			break;
00013e  e031              B        |L5.420|
;;;417    		case 4:
;;;418    			Neg_Value_int+=(((ADC_Value<<16)-Neg_Value_int)>>Params.Filter_Level);
000140  488c              LDR      r0,|L5.884|
000142  6800              LDR      r0,[r0,#0]  ; Neg_Value_int
000144  ebc0400a          RSB      r0,r0,r10,LSL #16
000148  4986              LDR      r1,|L5.868|
00014a  8a49              LDRH     r1,[r1,#0x12]  ; Params
00014c  4108              ASRS     r0,r0,r1
00014e  4989              LDR      r1,|L5.884|
000150  6809              LDR      r1,[r1,#0]  ; Neg_Value_int
000152  4408              ADD      r0,r0,r1
000154  4987              LDR      r1,|L5.884|
000156  6008              STR      r0,[r1,#0]  ; Neg_Value_int
;;;419    			Params.Neg_Value=FLAG_FILTER?(Neg_Value_int>>16):ADC_Value;
000158  4882              LDR      r0,|L5.868|
00015a  8800              LDRH     r0,[r0,#0]  ; Params
00015c  f0100f04          TST      r0,#4
000160  d003              BEQ      |L5.362|
000162  4608              MOV      r0,r1
000164  6800              LDR      r0,[r0,#0]  ; Neg_Value_int
000166  1400              ASRS     r0,r0,#16
000168  e000              B        |L5.364|
                  |L5.362|
00016a  4650              MOV      r0,r10
                  |L5.364|
00016c  497d              LDR      r1,|L5.868|
00016e  f8a10040          STRH     r0,[r1,#0x40]
;;;420    			ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_239Cycles5);
000172  2307              MOVS     r3,#7
000174  2201              MOVS     r2,#1
000176  2100              MOVS     r1,#0
000178  4875              LDR      r0,|L5.848|
00017a  f7fffffe          BL       ADC_RegularChannelConfig
;;;421    			break;
00017e  e011              B        |L5.420|
;;;422    		case 5:
;;;423    			if ((ADC_Value<DEV_ADC_LIMB+DELTA_ADC_DEV)&&(ADC_Value>DEV_ADC_LIMB-DELTA_ADC_DEV))
000180  f6415079          MOV      r0,#0x1d79
000184  4582              CMP      r10,r0
000186  da06              BGE      |L5.406|
000188  f24150b9          MOV      r0,#0x15b9
00018c  4582              CMP      r10,r0
00018e  dd02              BLE      |L5.406|
;;;424    				Dev_ID=DEV_LIMB;
000190  2003              MOVS     r0,#3
000192  4979              LDR      r1,|L5.888|
000194  6008              STR      r0,[r1,#0]  ; Dev_ID
                  |L5.406|
;;;425    			ADC_RegularChannelConfig(ADC1, ADC_Channel_16, 1, ADC_SampleTime_239Cycles5);
000196  2307              MOVS     r3,#7
000198  2201              MOVS     r2,#1
00019a  2110              MOVS     r1,#0x10
00019c  486c              LDR      r0,|L5.848|
00019e  f7fffffe          BL       ADC_RegularChannelConfig
;;;426    			break;
0001a2  bf00              NOP      
                  |L5.420|
0001a4  bf00              NOP                            ;401
;;;427    	}
;;;428    	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
0001a6  2101              MOVS     r1,#1
0001a8  4869              LDR      r0,|L5.848|
0001aa  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;429    
;;;430    	if (mb_sl_timer)
0001ae  4873              LDR      r0,|L5.892|
0001b0  6800              LDR      r0,[r0,#0]  ; mb_sl_timer
0001b2  b348              CBZ      r0,|L5.520|
;;;431    	{
;;;432    		if (--mb_sl_timer == 0)
0001b4  4871              LDR      r0,|L5.892|
0001b6  6800              LDR      r0,[r0,#0]  ; mb_sl_timer
0001b8  1e40              SUBS     r0,r0,#1
0001ba  4970              LDR      r1,|L5.892|
0001bc  6008              STR      r0,[r1,#0]  ; mb_sl_timer
0001be  d134              BNE      |L5.554|
;;;433    		{
;;;434    			if (mb_sl_mode == MB_SEND_MODE)
0001c0  486f              LDR      r0,|L5.896|
0001c2  7800              LDRB     r0,[r0,#0]  ; mb_sl_mode
0001c4  2801              CMP      r0,#1
0001c6  d120              BNE      |L5.522|
;;;435    			{
;;;436    				DE_ON;
0001c8  0301              LSLS     r1,r0,#12
0001ca  486e              LDR      r0,|L5.900|
0001cc  f7fffffe          BL       GPIO_SetBits
;;;437    				USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
0001d0  2201              MOVS     r2,#1
0001d2  f2407127          MOV      r1,#0x727
0001d6  486c              LDR      r0,|L5.904|
0001d8  f7fffffe          BL       USART_ITConfig
;;;438    				if ((MB_LSR & 0x80) && (mb_sl_bytecount < mb_sl_datasize))
0001dc  486a              LDR      r0,|L5.904|
0001de  8800              LDRH     r0,[r0,#0]
0001e0  f0100f80          TST      r0,#0x80
0001e4  d021              BEQ      |L5.554|
0001e6  4869              LDR      r0,|L5.908|
0001e8  6800              LDR      r0,[r0,#0]  ; mb_sl_bytecount
0001ea  4969              LDR      r1,|L5.912|
0001ec  6809              LDR      r1,[r1,#0]  ; mb_sl_datasize
0001ee  4288              CMP      r0,r1
0001f0  da1b              BGE      |L5.554|
;;;439    				{
;;;440    					RS485_THR = mb_slave_buf[mb_sl_bytecount++];
0001f2  4866              LDR      r0,|L5.908|
0001f4  6801              LDR      r1,[r0,#0]  ; mb_sl_bytecount
0001f6  6800              LDR      r0,[r0,#0]  ; mb_sl_bytecount
0001f8  1c40              ADDS     r0,r0,#1
0001fa  4a64              LDR      r2,|L5.908|
0001fc  6010              STR      r0,[r2,#0]  ; mb_sl_bytecount
0001fe  4865              LDR      r0,|L5.916|
000200  5c40              LDRB     r0,[r0,r1]
000202  4961              LDR      r1,|L5.904|
000204  1d09              ADDS     r1,r1,#4
000206  8008              STRH     r0,[r1,#0]
                  |L5.520|
000208  e00f              B        |L5.554|
                  |L5.522|
;;;441    				}
;;;442    			}
;;;443    			else
;;;444    			{
;;;445    				DE_OFF;
00020a  f44f5180          MOV      r1,#0x1000
00020e  485d              LDR      r0,|L5.900|
000210  f7fffffe          BL       GPIO_ResetBits
;;;446    				RE_ON;
000214  f44f5100          MOV      r1,#0x2000
000218  485a              LDR      r0,|L5.900|
00021a  f7fffffe          BL       GPIO_ResetBits
;;;447    				USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
00021e  2201              MOVS     r2,#1
000220  f2405125          MOV      r1,#0x525
000224  4858              LDR      r0,|L5.904|
000226  f7fffffe          BL       USART_ITConfig
                  |L5.554|
;;;448    			}
;;;449    		}
;;;450    	}
;;;451    
;;;452    	if (ready_timer<=(READY_TIMER_VALUE*5)) ready_timer+=2;
00022a  485b              LDR      r0,|L5.920|
00022c  6800              LDR      r0,[r0,#0]  ; ready_timer
00022e  495b              LDR      r1,|L5.924|
000230  4288              CMP      r0,r1
000232  dc04              BGT      |L5.574|
000234  4858              LDR      r0,|L5.920|
000236  6800              LDR      r0,[r0,#0]  ; ready_timer
000238  1c80              ADDS     r0,r0,#2
00023a  4957              LDR      r1,|L5.920|
00023c  6008              STR      r0,[r1,#0]  ; ready_timer
                  |L5.574|
;;;453    	if (Dev_ID==DEV_EDELWEIS)
00023e  484e              LDR      r0,|L5.888|
000240  6800              LDR      r0,[r0,#0]  ; Dev_ID
000242  2801              CMP      r0,#1
000244  d113              BNE      |L5.622|
;;;454    	{
;;;455    		if (ready_timer>READY_TIMER_VALUE)
000246  4854              LDR      r0,|L5.920|
000248  6800              LDR      r0,[r0,#0]  ; ready_timer
00024a  f2475130          MOV      r1,#0x7530
00024e  4288              CMP      r0,r1
000250  dd0d              BLE      |L5.622|
;;;456    		{
;;;457    		READY_ON;
000252  4844              LDR      r0,|L5.868|
000254  8f80              LDRH     r0,[r0,#0x3c]  ; Params
000256  f0400020          ORR      r0,r0,#0x20
00025a  4942              LDR      r1,|L5.868|
00025c  8788              STRH     r0,[r1,#0x3c]
00025e  4846              LDR      r0,|L5.888|
000260  6800              LDR      r0,[r0,#0]  ; Dev_ID
000262  2801              CMP      r0,#1
000264  d103              BNE      |L5.622|
000266  03c1              LSLS     r1,r0,#15
000268  484d              LDR      r0,|L5.928|
00026a  f7fffffe          BL       GPIO_SetBits
                  |L5.622|
;;;458    		}
;;;459    	}
;;;460    
;;;461    	if ((ready_timer>READY_TIMER_VALUE) && (!init))
00026e  484a              LDR      r0,|L5.920|
000270  6800              LDR      r0,[r0,#0]  ; ready_timer
000272  f2475130          MOV      r1,#0x7530
000276  4288              CMP      r0,r1
000278  dd08              BLE      |L5.652|
00027a  484a              LDR      r0,|L5.932|
00027c  7800              LDRB     r0,[r0,#0]  ; init
00027e  b928              CBNZ     r0,|L5.652|
;;;462    	READY_ON;
000280  4838              LDR      r0,|L5.868|
000282  8f80              LDRH     r0,[r0,#0x3c]  ; Params
000284  f0400020          ORR      r0,r0,#0x20
000288  4936              LDR      r1,|L5.868|
00028a  8788              STRH     r0,[r1,#0x3c]
                  |L5.652|
00028c  483a              LDR      r0,|L5.888|
00028e  6800              LDR      r0,[r0,#0]  ; Dev_ID
000290  2801              CMP      r0,#1
000292  d103              BNE      |L5.668|
000294  03c1              LSLS     r1,r0,#15
000296  4842              LDR      r0,|L5.928|
000298  f7fffffe          BL       GPIO_SetBits
                  |L5.668|
;;;463    
;;;464    	if (Dev_ID==DEV_LIMB)
00029c  4836              LDR      r0,|L5.888|
00029e  6800              LDR      r0,[r0,#0]  ; Dev_ID
0002a0  2803              CMP      r0,#3
0002a2  d14d              BNE      |L5.832|
;;;465    	{
;;;466    	if (ready_timer<30000)
0002a4  483c              LDR      r0,|L5.920|
0002a6  6800              LDR      r0,[r0,#0]  ; ready_timer
0002a8  f2475130          MOV      r1,#0x7530
0002ac  4288              CMP      r0,r1
0002ae  da02              BGE      |L5.694|
;;;467    			DACtmp=LIMB_TEST_VAL6;
0002b0  f6430bd1          MOV      r11,#0x38d1
0002b4  e018              B        |L5.744|
                  |L5.694|
;;;468    	else
;;;469    		{
;;;470    		switch (Params.Flags_Read&0x3)
0002b6  482b              LDR      r0,|L5.868|
0002b8  8f80              LDRH     r0,[r0,#0x3c]  ; Params
0002ba  f0100003          ANDS     r0,r0,#3
0002be  d006              BEQ      |L5.718|
0002c0  2801              CMP      r0,#1
0002c2  d007              BEQ      |L5.724|
0002c4  2802              CMP      r0,#2
0002c6  d008              BEQ      |L5.730|
0002c8  2803              CMP      r0,#3
0002ca  d10c              BNE      |L5.742|
0002cc  e008              B        |L5.736|
                  |L5.718|
;;;471    			{
;;;472    			case 0: DACtmp=LIMB_NONE_VAL; break;
0002ce  f6430bd1          MOV      r11,#0x38d1
0002d2  e008              B        |L5.742|
                  |L5.724|
;;;473    			case 1: DACtmp=LIMB_PI_VAL; break;
0002d4  f2455b3a          MOV      r11,#0x553a
0002d8  e005              B        |L5.742|
                  |L5.730|
;;;474    			case 2: DACtmp=LIMB_PF_VAL; break;
0002da  f2471ba2          MOV      r11,#0x71a2
0002de  e002              B        |L5.742|
                  |L5.736|
;;;475    			case 3: DACtmp=LIMB_PI_PF_VAL; break;
0002e0  f6486b0b          MOV      r11,#0x8e0b
0002e4  bf00              NOP      
                  |L5.742|
0002e6  bf00              NOP                            ;472
                  |L5.744|
;;;476    		}
;;;477    	}
;;;478    	if (ready_timer<25000)
0002e8  482b              LDR      r0,|L5.920|
0002ea  6800              LDR      r0,[r0,#0]  ; ready_timer
0002ec  f24611a8          MOV      r1,#0x61a8
0002f0  4288              CMP      r0,r1
0002f2  da01              BGE      |L5.760|
;;;479    			DACtmp=LIMB_TEST_VAL5;
0002f4  f2455b3a          MOV      r11,#0x553a
                  |L5.760|
;;;480    	if (ready_timer<20000)
0002f8  4827              LDR      r0,|L5.920|
0002fa  6800              LDR      r0,[r0,#0]  ; ready_timer
0002fc  f6446120          MOV      r1,#0x4e20
000300  4288              CMP      r0,r1
000302  da01              BGE      |L5.776|
;;;481    			DACtmp=LIMB_TEST_VAL4;
000304  f2471ba2          MOV      r11,#0x71a2
                  |L5.776|
;;;482    	if (ready_timer<15000)
000308  4823              LDR      r0,|L5.920|
00030a  6800              LDR      r0,[r0,#0]  ; ready_timer
00030c  f6432198          MOV      r1,#0x3a98
000310  4288              CMP      r0,r1
000312  da01              BGE      |L5.792|
;;;483    			DACtmp=LIMB_TEST_VAL3;
000314  f6486b0b          MOV      r11,#0x8e0b
                  |L5.792|
;;;484    	if (ready_timer<10000)
000318  481f              LDR      r0,|L5.920|
00031a  6800              LDR      r0,[r0,#0]  ; ready_timer
00031c  f2427110          MOV      r1,#0x2710
000320  4288              CMP      r0,r1
000322  da01              BGE      |L5.808|
;;;485    			DACtmp=LIMB_TEST_VAL2;
000324  f64a2b74          MOV      r11,#0xaa74
                  |L5.808|
;;;486    	if (ready_timer<5000)
000328  481b              LDR      r0,|L5.920|
00032a  6800              LDR      r0,[r0,#0]  ; ready_timer
00032c  f2413188          MOV      r1,#0x1388
000330  4288              CMP      r0,r1
000332  da01              BGE      |L5.824|
;;;487    			DACtmp=LIMB_TEST_VAL1;
000334  f6414b68          MOV      r11,#0x1c68
                  |L5.824|
;;;488    	TIM2->CCR2=DACtmp;
000338  f04f4180          MOV      r1,#0x40000000
00033c  f8a1b038          STRH     r11,[r1,#0x38]
                  |L5.832|
;;;489    	}
;;;490    	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
000340  2101              MOVS     r1,#1
000342  0788              LSLS     r0,r1,#30
000344  f7fffffe          BL       TIM_ClearITPendingBit
;;;491    }
000348  e8bd9ff0          POP      {r4-r12,pc}
;;;492    
                          ENDP

                  |L5.844|
                          DCD      adc_channel
                  |L5.848|
                          DCD      0x40012400
                  |L5.852|
                          DCD      Temp_Value_int
                  |L5.856|
                          DCD      0x81e7bf29
                  |L5.860|
                          DCD      0x4021143e
                  |L5.864|
                          DCD      0x406f4000
                  |L5.868|
                          DCD      Params
                  |L5.872|
                          DCD      Eass_Value_int
                  |L5.876|
                          DCD      Ehv_Value_int
                  |L5.880|
                          DCD      Pos_Value_int
                  |L5.884|
                          DCD      Neg_Value_int
                  |L5.888|
                          DCD      Dev_ID
                  |L5.892|
                          DCD      mb_sl_timer
                  |L5.896|
                          DCD      mb_sl_mode
                  |L5.900|
                          DCD      0x40010c00
                  |L5.904|
                          DCD      0x40013800
                  |L5.908|
                          DCD      mb_sl_bytecount
                  |L5.912|
                          DCD      mb_sl_datasize
                  |L5.916|
                          DCD      mb_slave_buf
                  |L5.920|
                          DCD      ready_timer
                  |L5.924|
                          DCD      0x000249f0
                  |L5.928|
                          DCD      0x40010800
                  |L5.932|
                          DCD      init

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;201    char in_byte;
;;;202    void USART1_IRQHandler(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;203    {
;;;204    	unsigned int	stat, crc, i;
;;;205    	unsigned int	startaddr, count;
;;;206    	char			stat_rs485;
;;;207    	char			stat_rs232, mb_lsr;
;;;208    
;;;209    	stat_rs485 = (RS485_IIR);
000004  48fb              LDR      r0,|L6.1012|
000006  8800              LDRH     r0,[r0,#0]
000008  f00008ff          AND      r8,r0,#0xff
;;;210    
;;;211    	if ((stat_rs485&0x80))
00000c  f0180f80          TST      r8,#0x80
000010  d001              BEQ      |L6.22|
;;;212    		stat=0x2;
000012  f04f0902          MOV      r9,#2
                  |L6.22|
;;;213    
;;;214    	if (stat_rs485&0x8) i=MB_RBR;
000016  f0180f08          TST      r8,#8
00001a  d002              BEQ      |L6.34|
00001c  48f5              LDR      r0,|L6.1012|
00001e  1d00              ADDS     r0,r0,#4
000020  8804              LDRH     r4,[r0,#0]
                  |L6.34|
;;;215    	if (stat_rs485&0x20) stat=0x4;
000022  f0180f20          TST      r8,#0x20
000026  d001              BEQ      |L6.44|
000028  f04f0904          MOV      r9,#4
                  |L6.44|
;;;216    	stat_rs485 = (USART1->CR1);
00002c  48f1              LDR      r0,|L6.1012|
00002e  300c              ADDS     r0,r0,#0xc
000030  8800              LDRH     r0,[r0,#0]
000032  f00008ff          AND      r8,r0,#0xff
;;;217    
;;;218    	switch (stat)
000036  f1b90f02          CMP      r9,#2
00003a  d006              BEQ      |L6.74|
00003c  f1b90f04          CMP      r9,#4
000040  d031              BEQ      |L6.166|
000042  f1b90f0c          CMP      r9,#0xc
000046  d170              BNE      |L6.298|
000048  e02c              B        |L6.164|
                  |L6.74|
;;;219    	{
;;;220    		case 0x2:
;;;221    			if ((MB_LSR & 0x80)  && (mb_sl_bytecount < mb_sl_datasize))
00004a  48ea              LDR      r0,|L6.1012|
00004c  8800              LDRH     r0,[r0,#0]
00004e  f0100f80          TST      r0,#0x80
000052  d010              BEQ      |L6.118|
000054  48e8              LDR      r0,|L6.1016|
000056  6800              LDR      r0,[r0,#0]  ; mb_sl_bytecount
000058  49e8              LDR      r1,|L6.1020|
00005a  6809              LDR      r1,[r1,#0]  ; mb_sl_datasize
00005c  4288              CMP      r0,r1
00005e  da0a              BGE      |L6.118|
;;;222    			{
;;;223    				RS485_THR = mb_slave_buf[mb_sl_bytecount++];
000060  48e5              LDR      r0,|L6.1016|
000062  6801              LDR      r1,[r0,#0]  ; mb_sl_bytecount
000064  6800              LDR      r0,[r0,#0]  ; mb_sl_bytecount
000066  1c40              ADDS     r0,r0,#1
000068  4ae3              LDR      r2,|L6.1016|
00006a  6010              STR      r0,[r2,#0]  ; mb_sl_bytecount
00006c  48e4              LDR      r0,|L6.1024|
00006e  5c40              LDRB     r0,[r0,r1]
000070  49e0              LDR      r1,|L6.1012|
000072  1d09              ADDS     r1,r1,#4
000074  8008              STRH     r0,[r1,#0]
                  |L6.118|
;;;224    			}
;;;225    			if (mb_sl_bytecount == mb_sl_datasize)
000076  48e0              LDR      r0,|L6.1016|
000078  6800              LDR      r0,[r0,#0]  ; mb_sl_bytecount
00007a  49e0              LDR      r1,|L6.1020|
00007c  6809              LDR      r1,[r1,#0]  ; mb_sl_datasize
00007e  4288              CMP      r0,r1
000080  d10f              BNE      |L6.162|
;;;226    			{
;;;227    				mb_sl_timer = MB_RCVPAUSE; // ??
000082  2014              MOVS     r0,#0x14
000084  49df              LDR      r1,|L6.1028|
000086  6008              STR      r0,[r1,#0]  ; mb_sl_timer
;;;228    				mb_sl_mode = MB_RECEIVE_MODE;
000088  2000              MOVS     r0,#0
00008a  49df              LDR      r1,|L6.1032|
00008c  7008              STRB     r0,[r1,#0]
;;;229    				mb_sl_bytecount = 0;
00008e  49da              LDR      r1,|L6.1016|
000090  6008              STR      r0,[r1,#0]  ; mb_sl_bytecount
;;;230    				mb_sl_datasize = 0;
000092  49da              LDR      r1,|L6.1020|
000094  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
;;;231    				USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
000096  2200              MOVS     r2,#0
000098  f2407127          MOV      r1,#0x727
00009c  48d5              LDR      r0,|L6.1012|
00009e  f7fffffe          BL       USART_ITConfig
                  |L6.162|
;;;232    			}
;;;233    			break;
0000a2  e1c0              B        |L6.1062|
                  |L6.164|
;;;234    		case 0xC:
;;;235    		case 0x4:
0000a4  bf00              NOP      
                  |L6.166|
;;;236    			in_byte = MB_RBR;
0000a6  48d3              LDR      r0,|L6.1012|
0000a8  1d00              ADDS     r0,r0,#4
0000aa  8800              LDRH     r0,[r0,#0]
0000ac  49d7              LDR      r1,|L6.1036|
0000ae  7008              STRB     r0,[r1,#0]
;;;237    			switch (mb_sl_bytecount)
0000b0  48d1              LDR      r0,|L6.1016|
0000b2  6800              LDR      r0,[r0,#0]  ; mb_sl_bytecount
0000b4  b110              CBZ      r0,|L6.188|
0000b6  2801              CMP      r0,#1
0000b8  d13c              BNE      |L6.308|
0000ba  e00d              B        |L6.216|
                  |L6.188|
;;;238    			{
;;;239    				case 0:
;;;240    					if (in_byte == MB_ADDR)
0000bc  48d3              LDR      r0,|L6.1036|
0000be  7800              LDRB     r0,[r0,#0]  ; in_byte
0000c0  2802              CMP      r0,#2
0000c2  d104              BNE      |L6.206|
;;;241    						mb_addr = in_byte;
0000c4  48d1              LDR      r0,|L6.1036|
0000c6  7800              LDRB     r0,[r0,#0]  ; in_byte
0000c8  49cd              LDR      r1,|L6.1024|
0000ca  7008              STRB     r0,[r1,#0]
0000cc  e003              B        |L6.214|
                  |L6.206|
;;;242    					else
;;;243    						mb_sl_bytecount = - 1;
0000ce  f04f30ff          MOV      r0,#0xffffffff
0000d2  49c9              LDR      r1,|L6.1016|
0000d4  6008              STR      r0,[r1,#0]  ; mb_sl_bytecount
                  |L6.214|
;;;244    					break;
0000d6  e186              B        |L6.998|
                  |L6.216|
;;;245    				case 1:
;;;246    					mb_func = in_byte;
0000d8  48cc              LDR      r0,|L6.1036|
0000da  7800              LDRB     r0,[r0,#0]  ; in_byte
0000dc  49c8              LDR      r1,|L6.1024|
0000de  7048              STRB     r0,[r1,#1]
;;;247    					if ((mb_func != 4) && (mb_func != 3) && (mb_func != 15) && (mb_func != 16) && (mb_func != 6) && (mb_func != 1) && (mb_func != 2) && (mb_func != 5))
0000e0  4608              MOV      r0,r1
0000e2  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
0000e4  2804              CMP      r0,#4
0000e6  d021              BEQ      |L6.300|
0000e8  4608              MOV      r0,r1
0000ea  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
0000ec  2803              CMP      r0,#3
0000ee  d01d              BEQ      |L6.300|
0000f0  4608              MOV      r0,r1
0000f2  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
0000f4  280f              CMP      r0,#0xf
0000f6  d019              BEQ      |L6.300|
0000f8  4608              MOV      r0,r1
0000fa  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
0000fc  2810              CMP      r0,#0x10
0000fe  d015              BEQ      |L6.300|
000100  4608              MOV      r0,r1
000102  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
000104  2806              CMP      r0,#6
000106  d011              BEQ      |L6.300|
000108  4608              MOV      r0,r1
00010a  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
00010c  2801              CMP      r0,#1
00010e  d00d              BEQ      |L6.300|
000110  4608              MOV      r0,r1
000112  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
000114  2802              CMP      r0,#2
000116  d009              BEQ      |L6.300|
000118  4608              MOV      r0,r1
00011a  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
00011c  2805              CMP      r0,#5
00011e  d005              BEQ      |L6.300|
;;;248    						mb_sl_bytecount = - 1;
000120  f04f30ff          MOV      r0,#0xffffffff
000124  49b4              LDR      r1,|L6.1016|
000126  6008              STR      r0,[r1,#0]  ; mb_sl_bytecount
000128  e003              B        |L6.306|
                  |L6.298|
00012a  e17b              B        |L6.1060|
                  |L6.300|
;;;249    					else
;;;250    						mb_sl_datasize = 8;
00012c  2008              MOVS     r0,#8
00012e  49b3              LDR      r1,|L6.1020|
000130  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
                  |L6.306|
;;;251    					break;
000132  e158              B        |L6.998|
                  |L6.308|
;;;252    				default:
;;;253    					mb_slave_buf[mb_sl_bytecount] = in_byte;
000134  48b5              LDR      r0,|L6.1036|
000136  7801              LDRB     r1,[r0,#0]  ; in_byte
000138  48b1              LDR      r0,|L6.1024|
00013a  4aaf              LDR      r2,|L6.1016|
00013c  6812              LDR      r2,[r2,#0]  ; mb_sl_bytecount
00013e  5481              STRB     r1,[r0,r2]
;;;254    					if ((mb_sl_bytecount == 6) && ((mb_func == 16) || (mb_func == 15)))
000140  48ad              LDR      r0,|L6.1016|
000142  6800              LDR      r0,[r0,#0]  ; mb_sl_bytecount
000144  2806              CMP      r0,#6
000146  d10c              BNE      |L6.354|
000148  48ad              LDR      r0,|L6.1024|
00014a  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
00014c  2810              CMP      r0,#0x10
00014e  d003              BEQ      |L6.344|
000150  48ab              LDR      r0,|L6.1024|
000152  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
000154  280f              CMP      r0,#0xf
000156  d104              BNE      |L6.354|
                  |L6.344|
;;;255    						mb_sl_datasize = 9 + mb_slave_buf[6];
000158  48a9              LDR      r0,|L6.1024|
00015a  7980              LDRB     r0,[r0,#6]  ; mb_slave_buf
00015c  3009              ADDS     r0,r0,#9
00015e  49a7              LDR      r1,|L6.1020|
000160  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
                  |L6.354|
;;;256    					if (mb_sl_datasize - 2 < mb_sl_bytecount)
000162  48a6              LDR      r0,|L6.1020|
000164  6800              LDR      r0,[r0,#0]  ; mb_sl_datasize
000166  1e80              SUBS     r0,r0,#2
000168  49a3              LDR      r1,|L6.1016|
00016a  6809              LDR      r1,[r1,#0]  ; mb_sl_bytecount
00016c  4288              CMP      r0,r1
00016e  da7d              BGE      |L6.620|
;;;257    					{
;;;258    						mb_sl_bytecount = - 1;
000170  f04f30ff          MOV      r0,#0xffffffff
000174  49a0              LDR      r1,|L6.1016|
000176  6008              STR      r0,[r1,#0]  ; mb_sl_bytecount
;;;259    						if (CRC16((unsigned char *) & mb_slave_buf, mb_sl_datasize))
000178  48a0              LDR      r0,|L6.1020|
00017a  6801              LDR      r1,[r0,#0]  ; mb_sl_datasize
00017c  48a0              LDR      r0,|L6.1024|
00017e  f7fffffe          BL       CRC16
000182  b118              CBZ      r0,|L6.396|
;;;260    						{
;;;261    							mb_sl_datasize = 0;
000184  2000              MOVS     r0,#0
000186  499d              LDR      r1,|L6.1020|
000188  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
;;;262    							break;
00018a  e12c              B        |L6.998|
                  |L6.396|
;;;263    						}
;;;264    						RE_OFF;
00018c  f44f5100          MOV      r1,#0x2000
000190  489f              LDR      r0,|L6.1040|
000192  f7fffffe          BL       GPIO_SetBits
;;;265    						USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);
000196  2200              MOVS     r2,#0
000198  f2405125          MOV      r1,#0x525
00019c  4895              LDR      r0,|L6.1012|
00019e  f7fffffe          BL       USART_ITConfig
;;;266    						startaddr = mb_slave_buf[3] + (mb_slave_buf[2] << 8);
0001a2  4897              LDR      r0,|L6.1024|
0001a4  78c0              LDRB     r0,[r0,#3]  ; mb_slave_buf
0001a6  4996              LDR      r1,|L6.1024|
0001a8  7889              LDRB     r1,[r1,#2]  ; mb_slave_buf
0001aa  eb002501          ADD      r5,r0,r1,LSL #8
;;;267    						count = mb_slave_buf[5] + (mb_slave_buf[4] << 8);
0001ae  4894              LDR      r0,|L6.1024|
0001b0  7940              LDRB     r0,[r0,#5]  ; mb_slave_buf
0001b2  4993              LDR      r1,|L6.1024|
0001b4  7909              LDRB     r1,[r1,#4]  ; mb_slave_buf
0001b6  eb002601          ADD      r6,r0,r1,LSL #8
;;;268    						switch (mb_func)
0001ba  4891              LDR      r0,|L6.1024|
0001bc  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
0001be  2805              CMP      r0,#5
0001c0  d00a              BEQ      |L6.472|
0001c2  dc04              BGT      |L6.462|
0001c4  2803              CMP      r0,#3
0001c6  d03f              BEQ      |L6.584|
0001c8  2804              CMP      r0,#4
                  |L6.458|
0001ca  d17a              BNE      |L6.706|
0001cc  e07a              B        |L6.708|
                  |L6.462|
0001ce  2806              CMP      r0,#6
0001d0  d01c              BEQ      |L6.524|
0001d2  2810              CMP      r0,#0x10
0001d4  d1f9              BNE      |L6.458|
0001d6  e0a7              B        |L6.808|
                  |L6.472|
;;;269    						{
;;;270    							case 5:
;;;271    								if ((startaddr > 7777) || mb_sl_timer)
0001d8  f6416061          MOV      r0,#0x1e61
0001dc  4285              CMP      r5,r0
0001de  d802              BHI      |L6.486|
0001e0  4888              LDR      r0,|L6.1028|
0001e2  6800              LDR      r0,[r0,#0]  ; mb_sl_timer
0001e4  b140              CBZ      r0,|L6.504|
                  |L6.486|
;;;272    								{
;;;273    									mb_func = 0x85;
0001e6  2085              MOVS     r0,#0x85
0001e8  4985              LDR      r1,|L6.1024|
0001ea  7048              STRB     r0,[r1,#1]
;;;274    									mb_slave_buf[2] = 2;
0001ec  2002              MOVS     r0,#2
0001ee  7088              STRB     r0,[r1,#2]
;;;275    									mb_sl_datasize = 3;
0001f0  2003              MOVS     r0,#3
0001f2  4982              LDR      r1,|L6.1020|
0001f4  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
0001f6  e008              B        |L6.522|
                  |L6.504|
;;;276    								}
;;;277    								else
;;;278    								{
;;;279    									mb_sl_datasize = 6;
0001f8  2006              MOVS     r0,#6
0001fa  4980              LDR      r1,|L6.1020|
0001fc  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
;;;280    									i = (mb_slave_buf[5] + (mb_slave_buf[4] << 8));
0001fe  4880              LDR      r0,|L6.1024|
000200  7940              LDRB     r0,[r0,#5]  ; mb_slave_buf
000202  497f              LDR      r1,|L6.1024|
000204  7909              LDRB     r1,[r1,#4]  ; mb_slave_buf
000206  eb002401          ADD      r4,r0,r1,LSL #8
                  |L6.522|
;;;281    								}
;;;282    								break;
00020a  e0ca              B        |L6.930|
                  |L6.524|
;;;283    							case 6:
;;;284    								if (((startaddr) > MB_MAXPARAMS - MB_MAX_INPUT_PARAMS) || mb_sl_timer)
00020c  f24260d0          MOV      r0,#0x26d0
000210  4285              CMP      r5,r0
000212  d802              BHI      |L6.538|
000214  487b              LDR      r0,|L6.1028|
000216  6800              LDR      r0,[r0,#0]  ; mb_sl_timer
000218  b140              CBZ      r0,|L6.556|
                  |L6.538|
;;;285    								{
;;;286    									mb_func = 0x86;
00021a  2086              MOVS     r0,#0x86
00021c  4978              LDR      r1,|L6.1024|
00021e  7048              STRB     r0,[r1,#1]
;;;287    									mb_slave_buf[2] = 2;
000220  2002              MOVS     r0,#2
000222  7088              STRB     r0,[r1,#2]
;;;288    									mb_sl_datasize = 3;
000224  2003              MOVS     r0,#3
000226  4975              LDR      r1,|L6.1020|
000228  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
00022a  e00c              B        |L6.582|
                  |L6.556|
;;;289    								}
;;;290    								else
;;;291    								{
;;;292    									mb_sl_datasize = 6;
00022c  2006              MOVS     r0,#6
00022e  4973              LDR      r1,|L6.1020|
000230  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
;;;293    									PARAMS_BUF[startaddr] = mb_slave_buf[5] + (mb_slave_buf[4] << 8);
000232  4873              LDR      r0,|L6.1024|
000234  7940              LDRB     r0,[r0,#5]  ; mb_slave_buf
000236  4972              LDR      r1,|L6.1024|
000238  7909              LDRB     r1,[r1,#4]  ; mb_slave_buf
00023a  eb002001          ADD      r0,r0,r1,LSL #8
00023e  4975              LDR      r1,|L6.1044|
000240  6809              LDR      r1,[r1,#0]  ; PARAMS_BUF
000242  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L6.582|
;;;294    								}
;;;295    								break;
000246  e0ac              B        |L6.930|
                  |L6.584|
;;;296    							case 3:
;;;297    								if (((startaddr + count) > MB_MAXPARAMS) || ((startaddr + count) < 1) || mb_sl_timer)
000248  19a8              ADDS     r0,r5,r6
00024a  f2427110          MOV      r1,#0x2710
00024e  4288              CMP      r0,r1
000250  d804              BHI      |L6.604|
000252  19a8              ADDS     r0,r5,r6
000254  d002              BEQ      |L6.604|
000256  486b              LDR      r0,|L6.1028|
000258  6800              LDR      r0,[r0,#0]  ; mb_sl_timer
00025a  b150              CBZ      r0,|L6.626|
                  |L6.604|
;;;298    								{
;;;299    									mb_func = 0x80 + 3;
00025c  2083              MOVS     r0,#0x83
00025e  4968              LDR      r1,|L6.1024|
000260  7048              STRB     r0,[r1,#1]
;;;300    									mb_slave_buf[2] = 2;
000262  2002              MOVS     r0,#2
000264  7088              STRB     r0,[r1,#2]
;;;301    									mb_sl_datasize = 3;
000266  2003              MOVS     r0,#3
000268  4964              LDR      r1,|L6.1020|
00026a  e000              B        |L6.622|
                  |L6.620|
00026c  e0ba              B        |L6.996|
                  |L6.622|
00026e  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
000270  e026              B        |L6.704|
                  |L6.626|
;;;302    								}
;;;303    								else
;;;304    								{
;;;305    									mb_slave_buf[2] = count << 1;
000272  0670              LSLS     r0,r6,#25
000274  0e00              LSRS     r0,r0,#24
000276  4962              LDR      r1,|L6.1024|
000278  7088              STRB     r0,[r1,#2]
;;;306    									mb_sl_datasize = 3 + mb_slave_buf[2];
00027a  4608              MOV      r0,r1
00027c  7880              LDRB     r0,[r0,#2]  ; mb_slave_buf
00027e  1cc0              ADDS     r0,r0,#3
000280  495e              LDR      r1,|L6.1020|
000282  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
;;;307    									for (i = 0; i <= count; i++)
000284  2400              MOVS     r4,#0
000286  e019              B        |L6.700|
                  |L6.648|
;;;308    									{
;;;309    										if ((startaddr + i) == 0)
000288  1928              ADDS     r0,r5,r4
00028a  d102              BNE      |L6.658|
;;;310    										mb_read_flag = 1;
00028c  2001              MOVS     r0,#1
00028e  4962              LDR      r1,|L6.1048|
000290  6008              STR      r0,[r1,#0]  ; mb_read_flag
                  |L6.658|
;;;311    										mb_slave_buf[3 + (i << 1)] = (int) PARAMS_BUF[startaddr + i] >> 8;
000292  1928              ADDS     r0,r5,r4
000294  495f              LDR      r1,|L6.1044|
000296  6809              LDR      r1,[r1,#0]  ; PARAMS_BUF
000298  f8310010          LDRH     r0,[r1,r0,LSL #1]
00029c  1200              ASRS     r0,r0,#8
00029e  2103              MOVS     r1,#3
0002a0  eb010144          ADD      r1,r1,r4,LSL #1
0002a4  4a56              LDR      r2,|L6.1024|
0002a6  5450              STRB     r0,[r2,r1]
;;;312    										mb_slave_buf[4 + (i << 1)] = PARAMS_BUF[startaddr + i];
0002a8  1928              ADDS     r0,r5,r4
0002aa  495a              LDR      r1,|L6.1044|
0002ac  6809              LDR      r1,[r1,#0]  ; PARAMS_BUF
0002ae  f8310010          LDRH     r0,[r1,r0,LSL #1]
0002b2  2104              MOVS     r1,#4
0002b4  eb010144          ADD      r1,r1,r4,LSL #1
0002b8  5450              STRB     r0,[r2,r1]
0002ba  1c64              ADDS     r4,r4,#1              ;307
                  |L6.700|
0002bc  42b4              CMP      r4,r6                 ;307
0002be  d9e3              BLS      |L6.648|
                  |L6.704|
;;;313    									}
;;;314    								}
;;;315    								break;
0002c0  e06f              B        |L6.930|
                  |L6.706|
0002c2  e063              B        |L6.908|
                  |L6.708|
;;;316    							case 4:
;;;317    								if (((startaddr + count) > MB_MAX_INPUT_PARAMS) || ((startaddr + count) < 1) || mb_sl_timer)
0002c4  19a8              ADDS     r0,r5,r6
0002c6  2840              CMP      r0,#0x40
0002c8  d804              BHI      |L6.724|
0002ca  19a8              ADDS     r0,r5,r6
0002cc  d002              BEQ      |L6.724|
0002ce  484d              LDR      r0,|L6.1028|
0002d0  6800              LDR      r0,[r0,#0]  ; mb_sl_timer
0002d2  b140              CBZ      r0,|L6.742|
                  |L6.724|
;;;318    								{
;;;319    									mb_func = 0x80 + 4;
0002d4  2084              MOVS     r0,#0x84
0002d6  494a              LDR      r1,|L6.1024|
0002d8  7048              STRB     r0,[r1,#1]
;;;320    									mb_slave_buf[2] = 2;
0002da  2002              MOVS     r0,#2
0002dc  7088              STRB     r0,[r1,#2]
;;;321    									mb_sl_datasize = 3;
0002de  2003              MOVS     r0,#3
0002e0  4946              LDR      r1,|L6.1020|
0002e2  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
0002e4  e01f              B        |L6.806|
                  |L6.742|
;;;322    								}
;;;323    								else
;;;324    								{
;;;325    									mb_slave_buf[2] = count << 1;
0002e6  0670              LSLS     r0,r6,#25
0002e8  0e00              LSRS     r0,r0,#24
0002ea  4945              LDR      r1,|L6.1024|
0002ec  7088              STRB     r0,[r1,#2]
;;;326    									mb_sl_datasize = 3 + mb_slave_buf[2];
0002ee  4608              MOV      r0,r1
0002f0  7880              LDRB     r0,[r0,#2]  ; mb_slave_buf
0002f2  1cc0              ADDS     r0,r0,#3
0002f4  4941              LDR      r1,|L6.1020|
0002f6  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
;;;327    									for (i = 0; i <= count; i++)
0002f8  2400              MOVS     r4,#0
0002fa  e012              B        |L6.802|
                  |L6.764|
;;;328    									{
;;;329    										mb_slave_buf[3 + (i << 1)] = (int) mb_input_params[startaddr + i] >> 8;
0002fc  1928              ADDS     r0,r5,r4
0002fe  4947              LDR      r1,|L6.1052|
000300  f8310010          LDRH     r0,[r1,r0,LSL #1]
000304  1200              ASRS     r0,r0,#8
000306  2103              MOVS     r1,#3
000308  eb010144          ADD      r1,r1,r4,LSL #1
00030c  4a3c              LDR      r2,|L6.1024|
00030e  5450              STRB     r0,[r2,r1]
;;;330    										mb_slave_buf[4 + (i << 1)] = mb_input_params[startaddr + i];
000310  1928              ADDS     r0,r5,r4
000312  4942              LDR      r1,|L6.1052|
000314  f8310010          LDRH     r0,[r1,r0,LSL #1]
000318  2104              MOVS     r1,#4
00031a  eb010144          ADD      r1,r1,r4,LSL #1
00031e  5450              STRB     r0,[r2,r1]
000320  1c64              ADDS     r4,r4,#1              ;327
                  |L6.802|
000322  42b4              CMP      r4,r6                 ;327
000324  d9ea              BLS      |L6.764|
                  |L6.806|
;;;331    									}
;;;332    								}
;;;333    								break;
000326  e03c              B        |L6.930|
                  |L6.808|
;;;334    							case 16:
;;;335    								if (((startaddr + count) > MB_MAXPARAMS) || ((startaddr + count) < 1) || mb_sl_timer)
000328  19a8              ADDS     r0,r5,r6
00032a  f2427110          MOV      r1,#0x2710
00032e  4288              CMP      r0,r1
000330  d804              BHI      |L6.828|
000332  19a8              ADDS     r0,r5,r6
000334  d002              BEQ      |L6.828|
000336  4833              LDR      r0,|L6.1028|
000338  6800              LDR      r0,[r0,#0]  ; mb_sl_timer
00033a  b140              CBZ      r0,|L6.846|
                  |L6.828|
;;;336    								{
;;;337    									mb_func = 0x80 + 16;
00033c  2090              MOVS     r0,#0x90
00033e  4930              LDR      r1,|L6.1024|
000340  7048              STRB     r0,[r1,#1]
;;;338    									mb_slave_buf[2] = 2;
000342  2002              MOVS     r0,#2
000344  7088              STRB     r0,[r1,#2]
;;;339    									mb_sl_datasize = 3;
000346  2003              MOVS     r0,#3
000348  492c              LDR      r1,|L6.1020|
00034a  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
00034c  e01d              B        |L6.906|
                  |L6.846|
;;;340    								}
;;;341    								else
;;;342    								{
;;;343    									count = (mb_slave_buf[4] << 8) + mb_slave_buf[5];
00034e  482c              LDR      r0,|L6.1024|
000350  7940              LDRB     r0,[r0,#5]  ; mb_slave_buf
000352  492b              LDR      r1,|L6.1024|
000354  7909              LDRB     r1,[r1,#4]  ; mb_slave_buf
000356  eb002601          ADD      r6,r0,r1,LSL #8
;;;344    									for (i = 0; i < count; i++)
00035a  2400              MOVS     r4,#0
00035c  e010              B        |L6.896|
                  |L6.862|
;;;345    										PARAMS_BUF[i] = ((mb_slave_buf[7 + (i << 1)] << 8) + mb_slave_buf[8 + (i << 1)]);
00035e  2008              MOVS     r0,#8
000360  eb000044          ADD      r0,r0,r4,LSL #1
000364  4926              LDR      r1,|L6.1024|
000366  5c08              LDRB     r0,[r1,r0]
000368  2107              MOVS     r1,#7
00036a  eb010144          ADD      r1,r1,r4,LSL #1
00036e  4a24              LDR      r2,|L6.1024|
000370  5c51              LDRB     r1,[r2,r1]
000372  eb002001          ADD      r0,r0,r1,LSL #8
000376  4927              LDR      r1,|L6.1044|
000378  6809              LDR      r1,[r1,#0]  ; PARAMS_BUF
00037a  f8210014          STRH     r0,[r1,r4,LSL #1]
00037e  1c64              ADDS     r4,r4,#1              ;344
                  |L6.896|
000380  42b4              CMP      r4,r6                 ;344
000382  d3ec              BCC      |L6.862|
;;;346    									if (0)
;;;347    									{
;;;348    										mb_func = 0x80 + 16;
;;;349    										mb_slave_buf[2] = 4;
;;;350    										mb_sl_datasize = 3;
;;;351    									}
;;;352    									else
;;;353    										mb_sl_datasize = 6;
000384  2006              MOVS     r0,#6
000386  491d              LDR      r1,|L6.1020|
000388  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
                  |L6.906|
;;;354    								}
;;;355    								break;
00038a  e00a              B        |L6.930|
                  |L6.908|
;;;356    							default:
;;;357    								mb_func = 0x80 + mb_func;
00038c  481c              LDR      r0,|L6.1024|
00038e  7840              LDRB     r0,[r0,#1]  ; mb_slave_buf
000390  3080              ADDS     r0,r0,#0x80
000392  491b              LDR      r1,|L6.1024|
000394  7048              STRB     r0,[r1,#1]
;;;358    								mb_slave_buf[2] = 1;
000396  2001              MOVS     r0,#1
000398  7088              STRB     r0,[r1,#2]
;;;359    								mb_sl_datasize = 3;
00039a  2003              MOVS     r0,#3
00039c  4917              LDR      r1,|L6.1020|
00039e  6008              STR      r0,[r1,#0]  ; mb_sl_datasize
0003a0  bf00              NOP                            ;268
                  |L6.930|
0003a2  bf00              NOP                            ;282
;;;360    						}
;;;361    						crc = CRC16(mb_slave_buf, mb_sl_datasize);
0003a4  4815              LDR      r0,|L6.1020|
0003a6  6801              LDR      r1,[r0,#0]  ; mb_sl_datasize
0003a8  4815              LDR      r0,|L6.1024|
0003aa  f7fffffe          BL       CRC16
0003ae  4607              MOV      r7,r0
;;;362    						mb_slave_buf[mb_sl_datasize++] = crc;
0003b0  4812              LDR      r0,|L6.1020|
0003b2  6802              LDR      r2,[r0,#0]  ; mb_sl_datasize
0003b4  6800              LDR      r0,[r0,#0]  ; mb_sl_datasize
0003b6  1c40              ADDS     r0,r0,#1
0003b8  4b10              LDR      r3,|L6.1020|
0003ba  6018              STR      r0,[r3,#0]  ; mb_sl_datasize
0003bc  4810              LDR      r0,|L6.1024|
0003be  5487              STRB     r7,[r0,r2]
;;;363    						mb_slave_buf[mb_sl_datasize++] = crc >> 8;
0003c0  f3c72107          UBFX     r1,r7,#8,#8
0003c4  4618              MOV      r0,r3
0003c6  6802              LDR      r2,[r0,#0]  ; mb_sl_datasize
0003c8  6800              LDR      r0,[r0,#0]  ; mb_sl_datasize
0003ca  1c40              ADDS     r0,r0,#1
0003cc  6018              STR      r0,[r3,#0]  ; mb_sl_datasize
0003ce  480c              LDR      r0,|L6.1024|
0003d0  5481              STRB     r1,[r0,r2]
;;;364    						mb_sl_timer = MB_SENDPAUSE;
0003d2  2014              MOVS     r0,#0x14
0003d4  490b              LDR      r1,|L6.1028|
0003d6  6008              STR      r0,[r1,#0]  ; mb_sl_timer
;;;365    						mb_sl_mode = MB_SEND_MODE;
0003d8  2001              MOVS     r0,#1
0003da  490b              LDR      r1,|L6.1032|
0003dc  7008              STRB     r0,[r1,#0]
;;;366    						mb_sl_timeout = 0;
0003de  2000              MOVS     r0,#0
0003e0  490f              LDR      r1,|L6.1056|
0003e2  6008              STR      r0,[r1,#0]  ; mb_sl_timeout
                  |L6.996|
0003e4  bf00              NOP                            ;237
                  |L6.998|
0003e6  bf00              NOP                            ;244
;;;367    					}
;;;368    					}
;;;369    					mb_sl_bytecount++;
0003e8  4803              LDR      r0,|L6.1016|
0003ea  6800              LDR      r0,[r0,#0]  ; mb_sl_bytecount
0003ec  1c40              ADDS     r0,r0,#1
0003ee  4902              LDR      r1,|L6.1016|
0003f0  6008              STR      r0,[r1,#0]  ; mb_sl_bytecount
;;;370    					break;
0003f2  e018              B        |L6.1062|
                  |L6.1012|
                          DCD      0x40013800
                  |L6.1016|
                          DCD      mb_sl_bytecount
                  |L6.1020|
                          DCD      mb_sl_datasize
                  |L6.1024|
                          DCD      mb_slave_buf
                  |L6.1028|
                          DCD      mb_sl_timer
                  |L6.1032|
                          DCD      mb_sl_mode
                  |L6.1036|
                          DCD      in_byte
                  |L6.1040|
                          DCD      0x40010c00
                  |L6.1044|
                          DCD      PARAMS_BUF
                  |L6.1048|
                          DCD      mb_read_flag
                  |L6.1052|
                          DCD      mb_input_params
                  |L6.1056|
                          DCD      mb_sl_timeout
                  |L6.1060|
;;;371    		default:
;;;372    			break;
000424  bf00              NOP      
                  |L6.1062|
000426  bf00              NOP                            ;233
;;;373    	}
;;;374    }
000428  e8bd87f0          POP      {r4-r10,pc}
;;;375    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;503    int i;
;;;504    int main(void)
000000  b09a              SUB      sp,sp,#0x68
;;;505    {
;;;506    #ifdef DEBUG
;;;507    	debug();
;;;508    #endif
;;;509    
;;;510    	/* <hash>  */
;;;511    	unsigned char *buffer, digest[16];
;;;512    	int trbr=0;
000002  2400              MOVS     r4,#0
;;;513    	MD5_CTX context;
;;;514    	buffer = (unsigned char*)0x08000000;
000004  f04f6500          MOV      r5,#0x8000000
;;;515    
;;;516    	MD5Init (&context);
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       MD5Init
;;;517    	MD5Update (&context,buffer, (0x0801FFFF-0x08000000));
00000e  4afe              LDR      r2,|L7.1032|
000010  4629              MOV      r1,r5
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       MD5Update
;;;518    	MD5Final (digest, &context);
000018  4669              MOV      r1,sp
00001a  a816              ADD      r0,sp,#0x58
00001c  f7fffffe          BL       MD5Final
;;;519    	while(trbr<8)
000020  e00c              B        |L7.60|
                  |L7.34|
;;;520    	{
;;;521    		Params.hash[trbr] = (unsigned short)digest[trbr*2]<<8|(unsigned short)digest[trbr*2+1];	//2 char in 1 ushort
000022  2001              MOVS     r0,#1
000024  eb000044          ADD      r0,r0,r4,LSL #1
000028  a916              ADD      r1,sp,#0x58
00002a  5c08              LDRB     r0,[r1,r0]
00002c  f8111014          LDRB     r1,[r1,r4,LSL #1]
000030  ea402101          ORR      r1,r0,r1,LSL #8
000034  48f5              LDR      r0,|L7.1036|
000036  f8201014          STRH     r1,[r0,r4,LSL #1]
;;;522    		trbr++;
00003a  1c64              ADDS     r4,r4,#1
                  |L7.60|
00003c  2c08              CMP      r4,#8                 ;519
00003e  dbf0              BLT      |L7.34|
;;;523    	}
;;;524    	/* </hash> */
;;;525    
;;;526    	Params.ver = 0x0102;
000040  f44f7081          MOV      r0,#0x102
000044  49f1              LDR      r1,|L7.1036|
000046  3954              SUBS     r1,r1,#0x54
000048  f8a10064          STRH     r0,[r1,#0x64]
;;;527    	RCC_Configuration();
00004c  f7fffffe          BL       RCC_Configuration
;;;528    
;;;529    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16|RCC_APB2Periph_TIM17| RCC_APB2Periph_USART1, ENABLE);
000050  2101              MOVS     r1,#1
000052  f44f20c8          MOV      r0,#0x64000
000056  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;530    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 |RCC_APB1Periph_TIM3, ENABLE);
00005a  2101              MOVS     r1,#1
00005c  2003              MOVS     r0,#3
00005e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;531    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA| RCC_APB2Periph_GPIOB| RCC_APB2Periph_GPIOC|RCC_APB2Periph_AFIO, ENABLE);
000062  2101              MOVS     r1,#1
000064  f240201d          MOV      r0,#0x21d
000068  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;532    
;;;533    	AFIO->MAPR|=AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1|AFIO_MAPR_TIM3_REMAP_PARTIALREMAP|AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
00006c  48e8              LDR      r0,|L7.1040|
00006e  6840              LDR      r0,[r0,#4]
000070  49e8              LDR      r1,|L7.1044|
000072  4308              ORRS     r0,r0,r1
000074  49e6              LDR      r1,|L7.1040|
000076  6048              STR      r0,[r1,#4]
;;;534    
;;;535    
;;;536    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11|GPIO_Pin_12;
000078  f44f50c0          MOV      r0,#0x1800
00007c  49e6              LDR      r1,|L7.1048|
00007e  8008              STRH     r0,[r1,#0]
;;;537    	GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_Out_PP;
000080  2010              MOVS     r0,#0x10
000082  70c8              STRB     r0,[r1,#3]
;;;538    	GPIO_InitStructure.GPIO_Speed =  GPIO_Speed_2MHz;
000084  2002              MOVS     r0,#2
000086  7088              STRB     r0,[r1,#2]
;;;539    
;;;540    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000088  48e4              LDR      r0,|L7.1052|
00008a  f7fffffe          BL       GPIO_Init
;;;541    
;;;542    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6;
00008e  2078              MOVS     r0,#0x78
000090  49e1              LDR      r1,|L7.1048|
000092  8008              STRH     r0,[r1,#0]
;;;543    	GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_AIN;
000094  2000              MOVS     r0,#0
000096  70c8              STRB     r0,[r1,#3]
;;;544    	GPIO_InitStructure.GPIO_Speed =  GPIO_Speed_2MHz;
000098  2002              MOVS     r0,#2
00009a  7088              STRB     r0,[r1,#2]
;;;545    
;;;546    	GPIO_Init(GPIOA, &GPIO_InitStructure);
00009c  48df              LDR      r0,|L7.1052|
00009e  f7fffffe          BL       GPIO_Init
;;;547    
;;;548    
;;;549    	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;550    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
0000a2  f44f7000          MOV      r0,#0x200
0000a6  49dc              LDR      r1,|L7.1048|
0000a8  8008              STRH     r0,[r1,#0]
;;;551    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000aa  2003              MOVS     r0,#3
0000ac  7088              STRB     r0,[r1,#2]
;;;552    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
0000ae  2018              MOVS     r0,#0x18
0000b0  70c8              STRB     r0,[r1,#3]
;;;553    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000b2  48da              LDR      r0,|L7.1052|
0000b4  f7fffffe          BL       GPIO_Init
;;;554    
;;;555    	/* Configure USART1 Rx (PA.10) as input floating */
;;;556    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
0000b8  f44f6080          MOV      r0,#0x400
0000bc  49d6              LDR      r1,|L7.1048|
0000be  8008              STRH     r0,[r1,#0]
;;;557    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000c0  2003              MOVS     r0,#3
0000c2  7088              STRB     r0,[r1,#2]
;;;558    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
0000c4  2048              MOVS     r0,#0x48
0000c6  70c8              STRB     r0,[r1,#3]
;;;559    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000c8  48d4              LDR      r0,|L7.1052|
0000ca  f7fffffe          BL       GPIO_Init
;;;560    
;;;561    	GPIO_InitStructure.GPIO_Pin =   GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_9;
0000ce  f44f701e          MOV      r0,#0x278
0000d2  49d1              LDR      r1,|L7.1048|
0000d4  8008              STRH     r0,[r1,#0]
;;;562    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
0000d6  2018              MOVS     r0,#0x18
0000d8  70c8              STRB     r0,[r1,#3]
;;;563    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000da  2003              MOVS     r0,#3
0000dc  7088              STRB     r0,[r1,#2]
;;;564    
;;;565    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0000de  48d0              LDR      r0,|L7.1056|
0000e0  f7fffffe          BL       GPIO_Init
;;;566    
;;;567    	GPIO_InitStructure.GPIO_Pin =   GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
0000e4  f44f4070          MOV      r0,#0xf000
0000e8  49cb              LDR      r1,|L7.1048|
0000ea  8008              STRH     r0,[r1,#0]
;;;568    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
0000ec  2010              MOVS     r0,#0x10
0000ee  70c8              STRB     r0,[r1,#3]
;;;569    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000f0  2003              MOVS     r0,#3
0000f2  7088              STRB     r0,[r1,#2]
;;;570    
;;;571    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0000f4  48ca              LDR      r0,|L7.1056|
0000f6  f7fffffe          BL       GPIO_Init
;;;572    
;;;573    	GPIO_InitStructure.GPIO_Pin =   GPIO_Pin_13;
0000fa  f44f5000          MOV      r0,#0x2000
0000fe  49c6              LDR      r1,|L7.1048|
000100  8008              STRH     r0,[r1,#0]
;;;574    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
000102  2014              MOVS     r0,#0x14
000104  70c8              STRB     r0,[r1,#3]
;;;575    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
000106  2002              MOVS     r0,#2
000108  7088              STRB     r0,[r1,#2]
;;;576    	GPIO_Init(GPIOC, &GPIO_InitStructure);
00010a  48c6              LDR      r0,|L7.1060|
00010c  f7fffffe          BL       GPIO_Init
;;;577    
;;;578    	GPIO_InitStructure.GPIO_Pin =   GPIO_Pin_15;
000110  f44f4000          MOV      r0,#0x8000
000114  49c0              LDR      r1,|L7.1048|
000116  8008              STRH     r0,[r1,#0]
;;;579    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000118  2010              MOVS     r0,#0x10
00011a  70c8              STRB     r0,[r1,#3]
;;;580    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
00011c  2002              MOVS     r0,#2
00011e  7088              STRB     r0,[r1,#2]
;;;581    	GPIO_Init(GPIOC, &GPIO_InitStructure);
000120  48c0              LDR      r0,|L7.1060|
000122  f7fffffe          BL       GPIO_Init
;;;582    
;;;583    	/* ADC1 and ADC2 operate independantly */
;;;584    	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
000126  2000              MOVS     r0,#0
000128  49bf              LDR      r1,|L7.1064|
00012a  6008              STR      r0,[r1,#0]  ; ADC_InitStructure
;;;585    	/* Disable the scan conversion so we do one at a time */
;;;586    	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
00012c  7108              STRB     r0,[r1,#4]
;;;587    	/* Don't do contimuous conversions - do them on demand */
;;;588    	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
00012e  7148              STRB     r0,[r1,#5]
;;;589    	/* Start conversin by software, not an external trigger */
;;;590    	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
000130  f44f2060          MOV      r0,#0xe0000
000134  6088              STR      r0,[r1,#8]  ; ADC_InitStructure
;;;591    	/* Conversions are 12 bit - put them in the lower 12 bits of the result */
;;;592    	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Left;
000136  f44f6000          MOV      r0,#0x800
00013a  60c8              STR      r0,[r1,#0xc]  ; ADC_InitStructure
;;;593    	/* Say how many channels would be used by the sequencer */
;;;594    	ADC_InitStructure.ADC_NbrOfChannel = 1;
00013c  2001              MOVS     r0,#1
00013e  7408              STRB     r0,[r1,#0x10]
;;;595    	ADC1->CR2|=(1<<23);
000140  48ba              LDR      r0,|L7.1068|
000142  6800              LDR      r0,[r0,#0]
000144  f4400000          ORR      r0,r0,#0x800000
000148  49b8              LDR      r1,|L7.1068|
00014a  6008              STR      r0,[r1,#0]
;;;596    
;;;597    	/* Now do the setup */
;;;598    	ADC_Init(ADC1, &ADC_InitStructure);
00014c  49b6              LDR      r1,|L7.1064|
00014e  48b7              LDR      r0,|L7.1068|
000150  3808              SUBS     r0,r0,#8
000152  f7fffffe          BL       ADC_Init
;;;599    	/* Enable ADC1 */
;;;600    	ADC_Cmd(ADC1, ENABLE);
000156  2101              MOVS     r1,#1
000158  48b4              LDR      r0,|L7.1068|
00015a  3808              SUBS     r0,r0,#8
00015c  f7fffffe          BL       ADC_Cmd
;;;601    
;;;602    	/* Enable ADC1 reset calibaration register */
;;;603    	ADC_ResetCalibration(ADC1);
000160  48b2              LDR      r0,|L7.1068|
000162  3808              SUBS     r0,r0,#8
000164  f7fffffe          BL       ADC_ResetCalibration
;;;604    	/* Check the end of ADC1 reset calibration register */
;;;605    	while(ADC_GetResetCalibrationStatus(ADC1));
000168  bf00              NOP      
                  |L7.362|
00016a  48b0              LDR      r0,|L7.1068|
00016c  3808              SUBS     r0,r0,#8
00016e  f7fffffe          BL       ADC_GetResetCalibrationStatus
000172  2800              CMP      r0,#0
000174  d1f9              BNE      |L7.362|
;;;606    	/* Start ADC1 calibaration */
;;;607    	ADC_StartCalibration(ADC1);
000176  48ad              LDR      r0,|L7.1068|
000178  3808              SUBS     r0,r0,#8
00017a  f7fffffe          BL       ADC_StartCalibration
;;;608    	/* Check the end of ADC1 calibration */
;;;609    
;;;610    
;;;611    	/* TIM2 configuration */
;;;612    	TIM_TimeBaseStructure.TIM_Period = 24000*2;
00017e  f64b3080          MOV      r0,#0xbb80
000182  49ab              LDR      r1,|L7.1072|
000184  8088              STRH     r0,[r1,#4]
;;;613    	TIM_TimeBaseStructure.TIM_Prescaler = 0;
000186  2000              MOVS     r0,#0
000188  8008              STRH     r0,[r1,#0]
;;;614    	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
00018a  80c8              STRH     r0,[r1,#6]
;;;615    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
00018c  8048              STRH     r0,[r1,#2]
;;;616    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;
00018e  7208              STRB     r0,[r1,#8]
;;;617    	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
000190  f04f4080          MOV      r0,#0x40000000
000194  f7fffffe          BL       TIM_TimeBaseInit
;;;618    
;;;619    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
000198  2060              MOVS     r0,#0x60
00019a  49a6              LDR      r1,|L7.1076|
00019c  8008              STRH     r0,[r1,#0]
;;;620    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
00019e  2001              MOVS     r0,#1
0001a0  8048              STRH     r0,[r1,#2]
;;;621    	TIM_OCInitStructure.TIM_Pulse = 12000;
0001a2  f64260e0          MOV      r0,#0x2ee0
0001a6  80c8              STRH     r0,[r1,#6]
;;;622    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
0001a8  2000              MOVS     r0,#0
0001aa  8108              STRH     r0,[r1,#8]
;;;623    
;;;624    	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
0001ac  f04f4080          MOV      r0,#0x40000000
0001b0  f7fffffe          BL       TIM_OC2Init
;;;625    
;;;626    	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
0001b4  2108              MOVS     r1,#8
0001b6  06c8              LSLS     r0,r1,#27
0001b8  f7fffffe          BL       TIM_OC2PreloadConfig
;;;627    
;;;628    	TIM2->DIER=1;
0001bc  2001              MOVS     r0,#1
0001be  0781              LSLS     r1,r0,#30
0001c0  8188              STRH     r0,[r1,#0xc]
;;;629    	TIM_Cmd(TIM2, ENABLE);
0001c2  2101              MOVS     r1,#1
0001c4  0780              LSLS     r0,r0,#30
0001c6  f7fffffe          BL       TIM_Cmd
;;;630    
;;;631    	TIM_TimeBaseStructure.TIM_Period = 24000;
0001ca  f64550c0          MOV      r0,#0x5dc0
0001ce  4998              LDR      r1,|L7.1072|
0001d0  8088              STRH     r0,[r1,#4]
;;;632    	TIM_TimeBaseStructure.TIM_Prescaler = 3;
0001d2  2003              MOVS     r0,#3
0001d4  8008              STRH     r0,[r1,#0]
;;;633    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
0001d6  2000              MOVS     r0,#0
0001d8  80c8              STRH     r0,[r1,#6]
;;;634    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
0001da  8048              STRH     r0,[r1,#2]
;;;635    
;;;636    	TIM_TimeBaseInit(TIM17, &TIM_TimeBaseStructure);
0001dc  4896              LDR      r0,|L7.1080|
0001de  f7fffffe          BL       TIM_TimeBaseInit
;;;637    
;;;638    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
0001e2  2060              MOVS     r0,#0x60
0001e4  4993              LDR      r1,|L7.1076|
0001e6  8008              STRH     r0,[r1,#0]
;;;639    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
0001e8  2001              MOVS     r0,#1
0001ea  8048              STRH     r0,[r1,#2]
;;;640    	TIM_OCInitStructure.TIM_Pulse = 0;
0001ec  2000              MOVS     r0,#0
0001ee  80c8              STRH     r0,[r1,#6]
;;;641    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
0001f0  8108              STRH     r0,[r1,#8]
;;;642    
;;;643    	TIM_OC1Init(TIM17, &TIM_OCInitStructure);
0001f2  4891              LDR      r0,|L7.1080|
0001f4  f7fffffe          BL       TIM_OC1Init
;;;644    
;;;645    	TIM_OC1PreloadConfig(TIM17, TIM_OCPreload_Enable);
0001f8  2108              MOVS     r1,#8
0001fa  488f              LDR      r0,|L7.1080|
0001fc  f7fffffe          BL       TIM_OC1PreloadConfig
;;;646    
;;;647    	TIM17->BDTR=(1<<15) ;
000200  f44f4000          MOV      r0,#0x8000
000204  498c              LDR      r1,|L7.1080|
000206  3144              ADDS     r1,r1,#0x44
000208  8008              STRH     r0,[r1,#0]
;;;648    
;;;649    	TIM_Cmd(TIM17, ENABLE);
00020a  2101              MOVS     r1,#1
00020c  488a              LDR      r0,|L7.1080|
00020e  f7fffffe          BL       TIM_Cmd
;;;650    
;;;651    	TIM_TimeBaseStructure.TIM_Period = 256;
000212  f44f7080          MOV      r0,#0x100
000216  4986              LDR      r1,|L7.1072|
000218  8088              STRH     r0,[r1,#4]
;;;652    	TIM_TimeBaseStructure.TIM_Prescaler = 0;
00021a  2000              MOVS     r0,#0
00021c  8008              STRH     r0,[r1,#0]
;;;653    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
00021e  80c8              STRH     r0,[r1,#6]
;;;654    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000220  8048              STRH     r0,[r1,#2]
;;;655    
;;;656    	TIM_TimeBaseInit(TIM16, &TIM_TimeBaseStructure);
000222  4886              LDR      r0,|L7.1084|
000224  f7fffffe          BL       TIM_TimeBaseInit
;;;657    
;;;658    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
000228  2060              MOVS     r0,#0x60
00022a  4982              LDR      r1,|L7.1076|
00022c  8008              STRH     r0,[r1,#0]
;;;659    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
00022e  2001              MOVS     r0,#1
000230  8048              STRH     r0,[r1,#2]
;;;660    	TIM_OCInitStructure.TIM_Pulse = 128;
000232  2080              MOVS     r0,#0x80
000234  80c8              STRH     r0,[r1,#6]
;;;661    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
000236  2000              MOVS     r0,#0
000238  8108              STRH     r0,[r1,#8]
;;;662    
;;;663    	TIM_OC1Init(TIM16, &TIM_OCInitStructure);
00023a  4880              LDR      r0,|L7.1084|
00023c  f7fffffe          BL       TIM_OC1Init
;;;664    
;;;665    	TIM_OC1PreloadConfig(TIM16, TIM_OCPreload_Enable);
000240  2108              MOVS     r1,#8
000242  487e              LDR      r0,|L7.1084|
000244  f7fffffe          BL       TIM_OC1PreloadConfig
;;;666    
;;;667    	TIM16->BDTR=(1<<15) ;
000248  f44f4000          MOV      r0,#0x8000
00024c  497b              LDR      r1,|L7.1084|
00024e  3144              ADDS     r1,r1,#0x44
000250  8008              STRH     r0,[r1,#0]
;;;668    	TIM16->CCER=13;
000252  200d              MOVS     r0,#0xd
000254  4979              LDR      r1,|L7.1084|
000256  3120              ADDS     r1,r1,#0x20
000258  8008              STRH     r0,[r1,#0]
;;;669    
;;;670    	TIM_Cmd(TIM16, ENABLE);
00025a  2101              MOVS     r1,#1
00025c  4877              LDR      r0,|L7.1084|
00025e  f7fffffe          BL       TIM_Cmd
;;;671    
;;;672    
;;;673    
;;;674    	TIM_TimeBaseStructure.TIM_Period = 256;
000262  f44f7080          MOV      r0,#0x100
000266  4972              LDR      r1,|L7.1072|
000268  8088              STRH     r0,[r1,#4]
;;;675    	TIM_TimeBaseStructure.TIM_Prescaler = 0;
00026a  2000              MOVS     r0,#0
00026c  8008              STRH     r0,[r1,#0]
;;;676    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
00026e  80c8              STRH     r0,[r1,#6]
;;;677    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000270  8048              STRH     r0,[r1,#2]
;;;678    
;;;679    	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
000272  4873              LDR      r0,|L7.1088|
000274  f7fffffe          BL       TIM_TimeBaseInit
;;;680    
;;;681    
;;;682    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
000278  2060              MOVS     r0,#0x60
00027a  496e              LDR      r1,|L7.1076|
00027c  8008              STRH     r0,[r1,#0]
;;;683    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
00027e  2001              MOVS     r0,#1
000280  8048              STRH     r0,[r1,#2]
;;;684    	TIM_OCInitStructure.TIM_Pulse = 128;
000282  2080              MOVS     r0,#0x80
000284  80c8              STRH     r0,[r1,#6]
;;;685    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
000286  2000              MOVS     r0,#0
000288  8108              STRH     r0,[r1,#8]
;;;686    
;;;687    	TIM_OC2Init(TIM3, &TIM_OCInitStructure);
00028a  486d              LDR      r0,|L7.1088|
00028c  f7fffffe          BL       TIM_OC2Init
;;;688    	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
000290  2108              MOVS     r1,#8
000292  486b              LDR      r0,|L7.1088|
000294  f7fffffe          BL       TIM_OC2PreloadConfig
;;;689    
;;;690    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
000298  2060              MOVS     r0,#0x60
00029a  4966              LDR      r1,|L7.1076|
00029c  8008              STRH     r0,[r1,#0]
;;;691    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
00029e  2001              MOVS     r0,#1
0002a0  8048              STRH     r0,[r1,#2]
;;;692    	TIM_OCInitStructure.TIM_Pulse = 10;
0002a2  200a              MOVS     r0,#0xa
0002a4  80c8              STRH     r0,[r1,#6]
;;;693    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
0002a6  2000              MOVS     r0,#0
0002a8  8108              STRH     r0,[r1,#8]
;;;694    
;;;695    	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
0002aa  4865              LDR      r0,|L7.1088|
0002ac  f7fffffe          BL       TIM_OC1Init
;;;696    
;;;697    
;;;698    	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
0002b0  2108              MOVS     r1,#8
0002b2  4863              LDR      r0,|L7.1088|
0002b4  f7fffffe          BL       TIM_OC1PreloadConfig
;;;699    
;;;700    	TIM_Cmd(TIM3, ENABLE);
0002b8  2101              MOVS     r1,#1
0002ba  4861              LDR      r0,|L7.1088|
0002bc  f7fffffe          BL       TIM_Cmd
;;;701    
;;;702    	DE_OFF;
0002c0  f44f5180          MOV      r1,#0x1000
0002c4  4856              LDR      r0,|L7.1056|
0002c6  f7fffffe          BL       GPIO_ResetBits
;;;703    	RE_ON;
0002ca  f44f5100          MOV      r1,#0x2000
0002ce  4854              LDR      r0,|L7.1056|
0002d0  f7fffffe          BL       GPIO_ResetBits
;;;704    	READY_OFF;
0002d4  484d              LDR      r0,|L7.1036|
0002d6  3854              SUBS     r0,r0,#0x54
0002d8  8f80              LDRH     r0,[r0,#0x3c]  ; Params
0002da  f0200020          BIC      r0,r0,#0x20
0002de  494b              LDR      r1,|L7.1036|
0002e0  3954              SUBS     r1,r1,#0x54
0002e2  8788              STRH     r0,[r1,#0x3c]
0002e4  4857              LDR      r0,|L7.1092|
0002e6  6800              LDR      r0,[r0,#0]  ; Dev_ID
0002e8  2801              CMP      r0,#1
0002ea  d103              BNE      |L7.756|
0002ec  03c1              LSLS     r1,r0,#15
0002ee  484b              LDR      r0,|L7.1052|
0002f0  f7fffffe          BL       GPIO_ResetBits
                  |L7.756|
;;;705    
;;;706    	USART_InitStructure.USART_BaudRate = 115200;
0002f4  f44f30e1          MOV      r0,#0x1c200
0002f8  4953              LDR      r1,|L7.1096|
0002fa  6008              STR      r0,[r1,#0]  ; USART_InitStructure
;;;707    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0002fc  2000              MOVS     r0,#0
0002fe  8088              STRH     r0,[r1,#4]
;;;708    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000300  80c8              STRH     r0,[r1,#6]
;;;709    	USART_InitStructure.USART_Parity = USART_Parity_No;
000302  8108              STRH     r0,[r1,#8]
;;;710    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000304  8188              STRH     r0,[r1,#0xc]
;;;711    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000306  200c              MOVS     r0,#0xc
000308  8148              STRH     r0,[r1,#0xa]
;;;712    
;;;713    	USART_Init(USART1, &USART_InitStructure);
00030a  4850              LDR      r0,|L7.1100|
00030c  f7fffffe          BL       USART_Init
;;;714    
;;;715    	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
000310  2201              MOVS     r2,#1
000312  f2407127          MOV      r1,#0x727
000316  484d              LDR      r0,|L7.1100|
000318  f7fffffe          BL       USART_ITConfig
;;;716    
;;;717    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
00031c  2201              MOVS     r2,#1
00031e  f2405125          MOV      r1,#0x525
000322  484a              LDR      r0,|L7.1100|
000324  f7fffffe          BL       USART_ITConfig
;;;718    	USART_Cmd(USART1, ENABLE);
000328  2101              MOVS     r1,#1
00032a  4848              LDR      r0,|L7.1100|
00032c  f7fffffe          BL       USART_Cmd
;;;719    
;;;720    	while(ADC_GetCalibrationStatus(ADC1));
000330  bf00              NOP      
                  |L7.818|
000332  483e              LDR      r0,|L7.1068|
000334  3808              SUBS     r0,r0,#8
000336  f7fffffe          BL       ADC_GetCalibrationStatus
00033a  2800              CMP      r0,#0
00033c  d1f9              BNE      |L7.818|
;;;721    
;;;722    	Params.HV_Value=3000;
00033e  f64030b8          MOV      r0,#0xbb8
000342  4932              LDR      r1,|L7.1036|
000344  3954              SUBS     r1,r1,#0x54
000346  8048              STRH     r0,[r1,#2]
;;;723    	Params.Freq=4000;
000348  f44f607a          MOV      r0,#0xfa0
00034c  8088              STRH     r0,[r1,#4]
;;;724    	Params.HV_Offset=32768;
00034e  f44f4000          MOV      r0,#0x8000
000352  80c8              STRH     r0,[r1,#6]
;;;725    	Params.Set_Null=32768;
000354  8188              STRH     r0,[r1,#0xc]
;;;726    	FlashRestore();
000356  f7fffffe          BL       FlashRestore
;;;727    	Params.Flags_Read=0;
00035a  2000              MOVS     r0,#0
00035c  492b              LDR      r1,|L7.1036|
00035e  3954              SUBS     r1,r1,#0x54
000360  8788              STRH     r0,[r1,#0x3c]
;;;728    	Params.ID1=*UNIQUE_ID1;
000362  483b              LDR      r0,|L7.1104|
000364  6800              LDR      r0,[r0,#0]  ; UNIQUE_ID1
000366  6800              LDR      r0,[r0,#0]
000368  f8a10048          STRH     r0,[r1,#0x48]
;;;729    	Params.ID2=(*UNIQUE_ID1)>>16;
00036c  4838              LDR      r0,|L7.1104|
00036e  6800              LDR      r0,[r0,#0]  ; UNIQUE_ID1
000370  6800              LDR      r0,[r0,#0]
000372  0c00              LSRS     r0,r0,#16
000374  f8a1004a          STRH     r0,[r1,#0x4a]
;;;730    	Params.ID3=(*UNIQUE_ID2);
000378  4836              LDR      r0,|L7.1108|
00037a  6800              LDR      r0,[r0,#0]  ; UNIQUE_ID2
00037c  6800              LDR      r0,[r0,#0]
00037e  f8a1004c          STRH     r0,[r1,#0x4c]
;;;731    
;;;732    	NVIC_Configuration();
000382  f7fffffe          BL       NVIC_Configuration
;;;733    
;;;734    	while (1)
000386  e16b              B        |L7.1632|
                  |L7.904|
;;;735    	{
;;;736    		__wfi();
000388  bf30              WFI      
;;;737    		TIM3->CCR1=128-128*(Params.HV_Offset-32768)/90; //Cont2Ass
00038a  4820              LDR      r0,|L7.1036|
00038c  3854              SUBS     r0,r0,#0x54
00038e  88c0              LDRH     r0,[r0,#6]  ; Params
000390  f5a04000          SUB      r0,r0,#0x8000
000394  01c0              LSLS     r0,r0,#7
000396  215a              MOVS     r1,#0x5a
000398  fb90f0f1          SDIV     r0,r0,r1
00039c  f1c00080          RSB      r0,r0,#0x80
0003a0  4927              LDR      r1,|L7.1088|
0003a2  3134              ADDS     r1,r1,#0x34
0003a4  8008              STRH     r0,[r1,#0]
;;;738    		TIM16->CCR1=128+128*(Params.Set_Null-32768)/200; //Set_Null
0003a6  4819              LDR      r0,|L7.1036|
0003a8  3854              SUBS     r0,r0,#0x54
0003aa  8980              LDRH     r0,[r0,#0xc]  ; Params
0003ac  f5a04000          SUB      r0,r0,#0x8000
0003b0  01c0              LSLS     r0,r0,#7
0003b2  21c8              MOVS     r1,#0xc8
0003b4  fb90f0f1          SDIV     r0,r0,r1
0003b8  3080              ADDS     r0,r0,#0x80
0003ba  4920              LDR      r1,|L7.1084|
0003bc  3134              ADDS     r1,r1,#0x34
0003be  8008              STRH     r0,[r1,#0]
;;;739    
;;;740    		if (init==1)
0003c0  4825              LDR      r0,|L7.1112|
0003c2  7800              LDRB     r0,[r0,#0]  ; init
0003c4  2801              CMP      r0,#1
0003c6  d161              BNE      |L7.1164|
;;;741    		{
;;;742    			if(!(((Params.Neg_Value*3000>>16)>(Params.Neg_Tresh_Danger*2))&&
0003c8  4810              LDR      r0,|L7.1036|
0003ca  3854              SUBS     r0,r0,#0x54
0003cc  f8b00040          LDRH     r0,[r0,#0x40]  ; Params
0003d0  f64031b8          MOV      r1,#0xbb8
0003d4  4348              MULS     r0,r1,r0
0003d6  1401              ASRS     r1,r0,#16
0003d8  480c              LDR      r0,|L7.1036|
0003da  3854              SUBS     r0,r0,#0x54
0003dc  8a00              LDRH     r0,[r0,#0x10]  ; Params
0003de  ebb10f40          CMP      r1,r0,LSL #1
0003e2  dd4f              BLE      |L7.1156|
0003e4  4809              LDR      r0,|L7.1036|
0003e6  3854              SUBS     r0,r0,#0x54
0003e8  8fc0              LDRH     r0,[r0,#0x3e]  ; Params
0003ea  f64031b8          MOV      r1,#0xbb8
0003ee  4348              MULS     r0,r1,r0
0003f0  1401              ASRS     r1,r0,#16
0003f2  4806              LDR      r0,|L7.1036|
0003f4  3854              SUBS     r0,r0,#0x54
0003f6  89c0              LDRH     r0,[r0,#0xe]  ; Params
0003f8  ebb10f40          CMP      r1,r0,LSL #1
0003fc  dd42              BLE      |L7.1156|
0003fe  4803              LDR      r0,|L7.1036|
000400  3854              SUBS     r0,r0,#0x54
000402  f8b00040          LDRH     r0,[r0,#0x40]  ; Params
000406  e029              B        |L7.1116|
                  |L7.1032|
                          DCD      0x0001ffff
                  |L7.1036|
                          DCD      Params+0x54
                  |L7.1040|
                          DCD      0x40010000
                  |L7.1044|
                          DCD      0x02000900
                  |L7.1048|
                          DCD      GPIO_InitStructure
                  |L7.1052|
                          DCD      0x40010800
                  |L7.1056|
                          DCD      0x40010c00
                  |L7.1060|
                          DCD      0x40011000
                  |L7.1064|
                          DCD      ADC_InitStructure
                  |L7.1068|
                          DCD      0x40012408
                  |L7.1072|
                          DCD      TIM_TimeBaseStructure
                  |L7.1076|
                          DCD      TIM_OCInitStructure
                  |L7.1080|
                          DCD      0x40014800
                  |L7.1084|
                          DCD      0x40014400
                  |L7.1088|
                          DCD      0x40000400
                  |L7.1092|
                          DCD      Dev_ID
                  |L7.1096|
                          DCD      USART_InitStructure
                  |L7.1100|
                          DCD      0x40013800
                  |L7.1104|
                          DCD      UNIQUE_ID1
                  |L7.1108|
                          DCD      UNIQUE_ID2
                  |L7.1112|
                          DCD      init
                  |L7.1116|
00045c  f64031b8          MOV      r1,#0xbb8
000460  4348              MULS     r0,r1,r0
000462  1401              ASRS     r1,r0,#16
000464  487f              LDR      r0,|L7.1636|
000466  8940              LDRH     r0,[r0,#0xa]  ; Params
000468  ebb10f40          CMP      r1,r0,LSL #1
00046c  dd0a              BLE      |L7.1156|
00046e  487d              LDR      r0,|L7.1636|
000470  8fc0              LDRH     r0,[r0,#0x3e]  ; Params
000472  f64031b8          MOV      r1,#0xbb8
000476  4348              MULS     r0,r1,r0
000478  1401              ASRS     r1,r0,#16
00047a  487a              LDR      r0,|L7.1636|
00047c  8900              LDRH     r0,[r0,#8]  ; Params
00047e  ebb10f40          CMP      r1,r0,LSL #1
000482  dc02              BGT      |L7.1162|
                  |L7.1156|
;;;743    				((Params.Pos_Value*3000>>16)>(Params.Pos_Tresh_Danger*2)) &&
;;;744    			((Params.Neg_Value*3000>>16)>(Params.Neg_Tresh*2))&&
;;;745    				((Params.Pos_Value*3000>>16)>(Params.Pos_Tresh*2))))
;;;746    			init=0;
000484  2000              MOVS     r0,#0
000486  4978              LDR      r1,|L7.1640|
000488  7008              STRB     r0,[r1,#0]
                  |L7.1162|
00048a  e0a5              B        |L7.1496|
                  |L7.1164|
;;;747    
;;;748    		}else
;;;749    		{
;;;750    			if (((Params.Neg_Value*3000>>16)+((Params.Neg_Value*3000>>16)/10))>Params.Neg_Tresh_Danger)
00048c  4875              LDR      r0,|L7.1636|
00048e  f8b00040          LDRH     r0,[r0,#0x40]  ; Params
000492  f64031b8          MOV      r1,#0xbb8
000496  4348              MULS     r0,r1,r0
000498  1400              ASRS     r0,r0,#16
00049a  210a              MOVS     r1,#0xa
00049c  fb90f1f1          SDIV     r1,r0,r1
0004a0  4870              LDR      r0,|L7.1636|
0004a2  f8b00040          LDRH     r0,[r0,#0x40]  ; Params
0004a6  f64032b8          MOV      r2,#0xbb8
0004aa  4350              MULS     r0,r2,r0
0004ac  eb014020          ADD      r0,r1,r0,ASR #16
0004b0  496c              LDR      r1,|L7.1636|
0004b2  8a09              LDRH     r1,[r1,#0x10]  ; Params
0004b4  4288              CMP      r0,r1
0004b6  dd10              BLE      |L7.1242|
;;;751    				PI_DANGER_ON;
0004b8  f44f5180          MOV      r1,#0x1000
0004bc  486b              LDR      r0,|L7.1644|
0004be  f7fffffe          BL       GPIO_SetBits
0004c2  f44f6100          MOV      r1,#0x800
0004c6  4869              LDR      r0,|L7.1644|
0004c8  f7fffffe          BL       GPIO_ResetBits
0004cc  4865              LDR      r0,|L7.1636|
0004ce  8f80              LDRH     r0,[r0,#0x3c]  ; Params
0004d0  f0400002          ORR      r0,r0,#2
0004d4  4963              LDR      r1,|L7.1636|
0004d6  8788              STRH     r0,[r1,#0x3c]
0004d8  e00a              B        |L7.1264|
                  |L7.1242|
;;;752    			else
;;;753    				PI_DANGER_OFF;
0004da  f44f5180          MOV      r1,#0x1000
0004de  4863              LDR      r0,|L7.1644|
0004e0  f7fffffe          BL       GPIO_ResetBits
0004e4  485f              LDR      r0,|L7.1636|
0004e6  8f80              LDRH     r0,[r0,#0x3c]  ; Params
0004e8  f0200002          BIC      r0,r0,#2
0004ec  495d              LDR      r1,|L7.1636|
0004ee  8788              STRH     r0,[r1,#0x3c]
                  |L7.1264|
;;;754    	
;;;755    			if (((Params.Pos_Value*3000>>16)+((Params.Pos_Value*3000>>16)/10))>Params.Pos_Tresh_Danger)
0004f0  485c              LDR      r0,|L7.1636|
0004f2  8fc0              LDRH     r0,[r0,#0x3e]  ; Params
0004f4  f64031b8          MOV      r1,#0xbb8
0004f8  4348              MULS     r0,r1,r0
0004fa  1400              ASRS     r0,r0,#16
0004fc  210a              MOVS     r1,#0xa
0004fe  fb90f1f1          SDIV     r1,r0,r1
000502  4858              LDR      r0,|L7.1636|
000504  8fc0              LDRH     r0,[r0,#0x3e]  ; Params
000506  f64032b8          MOV      r2,#0xbb8
00050a  4350              MULS     r0,r2,r0
00050c  eb014020          ADD      r0,r1,r0,ASR #16
000510  4954              LDR      r1,|L7.1636|
000512  89c9              LDRH     r1,[r1,#0xe]  ; Params
000514  4288              CMP      r0,r1
000516  dd10              BLE      |L7.1338|
;;;756    				PF_DANGER_ON;
000518  f44f6100          MOV      r1,#0x800
00051c  4853              LDR      r0,|L7.1644|
00051e  f7fffffe          BL       GPIO_SetBits
000522  f44f5180          MOV      r1,#0x1000
000526  4851              LDR      r0,|L7.1644|
000528  f7fffffe          BL       GPIO_ResetBits
00052c  484d              LDR      r0,|L7.1636|
00052e  8f80              LDRH     r0,[r0,#0x3c]  ; Params
000530  f0400001          ORR      r0,r0,#1
000534  494b              LDR      r1,|L7.1636|
000536  8788              STRH     r0,[r1,#0x3c]
000538  e00a              B        |L7.1360|
                  |L7.1338|
;;;757    			else
;;;758    				PF_DANGER_OFF;
00053a  f44f6100          MOV      r1,#0x800
00053e  484b              LDR      r0,|L7.1644|
000540  f7fffffe          BL       GPIO_ResetBits
000544  4847              LDR      r0,|L7.1636|
000546  8f80              LDRH     r0,[r0,#0x3c]  ; Params
000548  f0200001          BIC      r0,r0,#1
00054c  4945              LDR      r1,|L7.1636|
00054e  8788              STRH     r0,[r1,#0x3c]
                  |L7.1360|
;;;759    	
;;;760    			if (((Params.Neg_Value*3000>>16)+((Params.Neg_Value*3000>>16)/10))>Params.Neg_Tresh)
000550  4844              LDR      r0,|L7.1636|
000552  f8b00040          LDRH     r0,[r0,#0x40]  ; Params
000556  f64031b8          MOV      r1,#0xbb8
00055a  4348              MULS     r0,r1,r0
00055c  1400              ASRS     r0,r0,#16
00055e  210a              MOVS     r1,#0xa
000560  fb90f1f1          SDIV     r1,r0,r1
000564  483f              LDR      r0,|L7.1636|
000566  f8b00040          LDRH     r0,[r0,#0x40]  ; Params
00056a  f64032b8          MOV      r2,#0xbb8
00056e  4350              MULS     r0,r2,r0
000570  eb014020          ADD      r0,r1,r0,ASR #16
000574  493b              LDR      r1,|L7.1636|
000576  8949              LDRH     r1,[r1,#0xa]  ; Params
000578  4288              CMP      r0,r1
00057a  dd06              BLE      |L7.1418|
;;;761    				PI_TRESH_ON;
00057c  4839              LDR      r0,|L7.1636|
00057e  8f80              LDRH     r0,[r0,#0x3c]  ; Params
000580  f0400008          ORR      r0,r0,#8
000584  4937              LDR      r1,|L7.1636|
000586  8788              STRH     r0,[r1,#0x3c]
000588  e005              B        |L7.1430|
                  |L7.1418|
;;;762    			else
;;;763    				PI_TRESH_OFF;
00058a  4836              LDR      r0,|L7.1636|
00058c  8f80              LDRH     r0,[r0,#0x3c]  ; Params
00058e  f0200008          BIC      r0,r0,#8
000592  4934              LDR      r1,|L7.1636|
000594  8788              STRH     r0,[r1,#0x3c]
                  |L7.1430|
;;;764    	
;;;765    			if (((Params.Pos_Value*3000>>16)+((Params.Pos_Value*3000>>16)/10))>Params.Pos_Tresh)
000596  4833              LDR      r0,|L7.1636|
000598  8fc0              LDRH     r0,[r0,#0x3e]  ; Params
00059a  f64031b8          MOV      r1,#0xbb8
00059e  4348              MULS     r0,r1,r0
0005a0  1400              ASRS     r0,r0,#16
0005a2  210a              MOVS     r1,#0xa
0005a4  fb90f1f1          SDIV     r1,r0,r1
0005a8  482e              LDR      r0,|L7.1636|
0005aa  8fc0              LDRH     r0,[r0,#0x3e]  ; Params
0005ac  f64032b8          MOV      r2,#0xbb8
0005b0  4350              MULS     r0,r2,r0
0005b2  eb014020          ADD      r0,r1,r0,ASR #16
0005b6  492b              LDR      r1,|L7.1636|
0005b8  8909              LDRH     r1,[r1,#8]  ; Params
0005ba  4288              CMP      r0,r1
0005bc  dd06              BLE      |L7.1484|
;;;766    				PF_TRESH_ON;
0005be  4829              LDR      r0,|L7.1636|
0005c0  8f80              LDRH     r0,[r0,#0x3c]  ; Params
0005c2  f0400004          ORR      r0,r0,#4
0005c6  4927              LDR      r1,|L7.1636|
0005c8  8788              STRH     r0,[r1,#0x3c]
0005ca  e005              B        |L7.1496|
                  |L7.1484|
;;;767    			else
;;;768    				PF_TRESH_OFF;
0005cc  4825              LDR      r0,|L7.1636|
0005ce  8f80              LDRH     r0,[r0,#0x3c]  ; Params
0005d0  f0200004          BIC      r0,r0,#4
0005d4  4923              LDR      r1,|L7.1636|
0005d6  8788              STRH     r0,[r1,#0x3c]
                  |L7.1496|
;;;769    		}
;;;770    
;;;771    		if (Params.Flags_Write&2) Kmax_ON; else Kmax_OFF;
0005d8  4822              LDR      r0,|L7.1636|
0005da  8800              LDRH     r0,[r0,#0]  ; Params
0005dc  f0100f02          TST      r0,#2
0005e0  d005              BEQ      |L7.1518|
0005e2  f44f4180          MOV      r1,#0x4000
0005e6  4822              LDR      r0,|L7.1648|
0005e8  f7fffffe          BL       GPIO_ResetBits
0005ec  e004              B        |L7.1528|
                  |L7.1518|
0005ee  f44f4180          MOV      r1,#0x4000
0005f2  481f              LDR      r0,|L7.1648|
0005f4  f7fffffe          BL       GPIO_SetBits
                  |L7.1528|
;;;772    
;;;773    		if (Params.Flags_Write&1)
0005f8  481a              LDR      r0,|L7.1636|
0005fa  8800              LDRH     r0,[r0,#0]  ; Params
0005fc  f0100f01          TST      r0,#1
000600  d005              BEQ      |L7.1550|
;;;774    		{
;;;775    			__disable_irq();
000602  b672              CPSID    i
;;;776    			__disable_fiq();
000604  b671              CPSID    f
;;;777    			FlashStore();
000606  f7fffffe          BL       FlashStore
;;;778    			__enable_irq();
00060a  b662              CPSIE    i
;;;779    			__enable_fiq();
00060c  b661              CPSIE    f
                  |L7.1550|
;;;780    		}
;;;781    
;;;782    		TIM3->CCR2=1+256*Params.HV_Value/3350; //2*Um
00060e  4815              LDR      r0,|L7.1636|
000610  8840              LDRH     r0,[r0,#2]  ; Params
000612  0200              LSLS     r0,r0,#8
000614  f6405116          MOV      r1,#0xd16
000618  fb90f0f1          SDIV     r0,r0,r1
00061c  1c40              ADDS     r0,r0,#1
00061e  4915              LDR      r1,|L7.1652|
000620  8008              STRH     r0,[r1,#0]
;;;783    
;;;784    		if((Params.Freq>499)&&(Params.Freq<8001))
000622  4810              LDR      r0,|L7.1636|
000624  8880              LDRH     r0,[r0,#4]  ; Params
000626  f5b07ffa          CMP      r0,#0x1f4
00062a  db19              BLT      |L7.1632|
00062c  480d              LDR      r0,|L7.1636|
00062e  8880              LDRH     r0,[r0,#4]  ; Params
000630  f5b05ffa          CMP      r0,#0x1f40
000634  dc14              BGT      |L7.1632|
;;;785    		{
;;;786    			TIM17->ARR=10*24000000/(Params.Freq*2)/4;  //2*Freq
000636  490b              LDR      r1,|L7.1636|
000638  8889              LDRH     r1,[r1,#4]  ; Params
00063a  0049              LSLS     r1,r1,#1
00063c  4a0e              LDR      r2,|L7.1656|
00063e  fb92f0f1          SDIV     r0,r2,r1
000642  17c1              ASRS     r1,r0,#31
000644  eb007191          ADD      r1,r0,r1,LSR #30
000648  f3c1018f          UBFX     r1,r1,#2,#16
00064c  4a0b              LDR      r2,|L7.1660|
00064e  8011              STRH     r1,[r2,#0]
;;;787    			TIM17->CCR1=TIM17->ARR/2;
000650  4611              MOV      r1,r2
000652  8808              LDRH     r0,[r1,#0]
000654  eb0071d0          ADD      r1,r0,r0,LSR #31
000658  1049              ASRS     r1,r1,#1
00065a  4a08              LDR      r2,|L7.1660|
00065c  3208              ADDS     r2,r2,#8
00065e  8011              STRH     r1,[r2,#0]
                  |L7.1632|
000660  e692              B        |L7.904|
;;;788    		}
;;;789    	}
;;;790    }
;;;791    
                          ENDP

000662  0000              DCW      0x0000
                  |L7.1636|
                          DCD      Params
                  |L7.1640|
                          DCD      init
                  |L7.1644|
                          DCD      0x40010800
                  |L7.1648|
                          DCD      0x40010c00
                  |L7.1652|
                          DCD      0x40000438
                  |L7.1656|
                          DCD      0x0e4e1c00
                  |L7.1660|
                          DCD      0x4001482c

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mb_slave_buf
                          %        1024
                  mb_input_params
                          %        130
                  Params
                          %        122
                  USART_InitStructure
                          %        16
                  ADC_InitStructure
                          %        20
                  TIM_TimeBaseStructure
                          %        10
                  TIM_OCInitStructure
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  init
000000  01000000          DCB      0x01,0x00,0x00,0x00
                  mb_sl_bytecount
                          DCD      0x00000000
                  mb_sl_timer
                          DCD      0x00000000
                  mb_sl_datasize
                          DCD      0x00000000
                  mb_sl_mode
000010  00                DCB      0x00
                  uart_free
000011  01                DCB      0x01
                  flash_write
000012  00                DCB      0x00
                  check4flash_write
000013  00                DCB      0x00
                  work_enable
000014  00                DCB      0x00
                  triac_on
000015  00                DCB      0x00
                  triac_on_prev
000016  00                DCB      0x00
                  Tset_in_flag
000017  00                DCB      0x00
                  Tallow_Tset_update
000018  01                DCB      0x01
                  Tdiff_zone
000019  00                DCB      0x00
                  Tdiff_zone_prev
00001a  0000              DCB      0x00,0x00
                  mb_sl_timeout
                          DCD      0x00000000
                  mb_read_flag
                          DCD      0x00000000
                  UNIQUE_ID1
                          DCD      0x1ffff7e8
                  UNIQUE_ID2
                          DCD      0x1ffff7ec
                  PARAMS_BUF
                          DCD      Params
                  FLASH_PARAMS_BUF
                          DCD      0x08003c00
                  Flash_Params
                          DCD      0x08003c00
                  EraseCounter
                          DCD      0x00000000
                  Address
                          DCD      0x00000000
                  NbrOfPage
                          DCD      0x00000000
                  BUF1
                          DCD      Params
                  BUF2
                          DCD      0x08003c00
                  adc_channel
                          DCD      0x00000000
                  Pos_Value_int
                          DCD      0x00000000
                  Neg_Value_int
                          DCD      0x00000000
                  Ehv_Value_int
                          DCD      0x00000000
                  Eass_Value_int
                          DCD      0x00000000
                  Temp_Value_int
                          DCD      0x00000000
                  Dev_ID
                          DCD      0x00000000
                  ready_timer
                          DCD      0x00000000
                  CCR1_Val
00006c  8000              DCW      0x8000
                  CCR2_Val
00006e  0177              DCW      0x0177
                  CCR3_Val
000070  00fa              DCW      0x00fa
                  CCR4_Val
000072  007d              DCW      0x007d
                  ||ch||
                          DCD      0x00000000
                  mb_addr
                          DCD      0x00000000
                  Data
                          DCD      0x00000000
                  FLASHStatus
000080  00                DCB      0x00
                  MemoryProgramStatus
000081  00                DCB      0x00
                  HSEStartUpStatus
000082  00                DCB      0x00
                  in_byte
000083  00                DCB      0x00
                  GPIO_InitStructure
                          DCD      0x00000000
                  i
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_init____REV16|
#line 115 "D:\\tools\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_init____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_init____REVSH|
#line 130
|__asm___6_main_c_init____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
